Opening files...
Parsing specification from standard input...
Checking specification...
Warning: Terminal "DIVIDE" was declared but never used
Warning: Terminal "FUNCTION" was declared but never used
Warning: Terminal "GE" was declared but never used
Warning: Terminal "LPAREN" was declared but never used
Warning: Terminal "INT" was declared but never used
Warning: Terminal "ARRAY" was declared but never used
Warning: Terminal "FOR" was declared but never used
Warning: Terminal "MINUS" was declared but never used
Warning: Terminal "RPAREN" was declared but never used
Warning: Terminal "SEMICOLON" was declared but never used
Warning: Terminal "AND" was declared but never used
Warning: Terminal "LT" was declared but never used
Warning: Terminal "TYPE" was declared but never used
Warning: Terminal "NIL" was declared but never used
Warning: Terminal "IN" was declared but never used
Warning: Terminal "OR" was declared but never used
Warning: Terminal "COMMA" was declared but never used
Warning: Terminal "PLUS" was declared but never used
Warning: Terminal "ASSIGN" was declared but never used
Warning: Terminal "IF" was declared but never used
Warning: Terminal "LE" was declared but never used
Warning: Terminal "OF" was declared but never used
Warning: Terminal "NEQ" was declared but never used
Warning: Terminal "BREAK" was declared but never used
Warning: Terminal "EQ" was declared but never used
Warning: Terminal "TIMES" was declared but never used
Warning: Terminal "COLON" was declared but never used
Warning: Terminal "LBRACE" was declared but never used
Warning: Terminal "ELSE" was declared but never used
Warning: Terminal "TO" was declared but never used
Warning: Terminal "WHILE" was declared but never used
Warning: Terminal "LET" was declared but never used
Warning: Terminal "THEN" was declared but never used
Warning: Terminal "RBRACE" was declared but never used
Warning: Terminal "END" was declared but never used
Warning: Terminal "STRING" was declared but never used
Warning: Terminal "GT" was declared but never used
Warning: Terminal "VAR" was declared but never used
Warning: Terminal "DO" was declared but never used
Building parse tables...
  Computing non-terminal nullability...
  Computing first sets...
  Building state machine...
  Filling in tables...
  Checking for non-reduced productions...
*** Production "Dec ::= TypeDec " never reduced
*** Production "Dec ::= FunctionDec " never reduced
*** Production "Dec ::= VarDec " never reduced
Writing parser...
===== Terminals =====
DIVIDE FUNCTION GE LPAREN INT 
ARRAY FOR MINUS RPAREN SEMICOLON 
AND LT TYPE NIL IN 
OR COMMA PLUS ASSIGN IF 
DOT ID LE OF EOF 
error NEQ BREAK EQ LBRACK 
TIMES COLON LBRACE ELSE RBRACK 
TO WHILE LET THEN RBRACE 
END STRING GT VAR DO 


===== Non terminals =====
SubscriptVar Dec Exp VarDec FunctionDec 
$START FieldVar Var TypeDec 

===== Productions =====
Dec ::= TypeDec 
Dec ::= FunctionDec 
Dec ::= VarDec 
SubscriptVar ::= SubscriptVar LBRACK Exp RBRACK 
SubscriptVar ::= FieldVar LBRACK Exp RBRACK 
SubscriptVar ::= ID LBRACK Exp RBRACK 
FieldVar ::= Var DOT ID 
Var ::= SubscriptVar 
Var ::= FieldVar 
Var ::= ID 
Exp ::= Var 
Exp ::= error 
$START ::= Exp EOF 

===== Viable Prefix Recognizer =====
START lalr_state [0]: {
  [SubscriptVar ::= (*) FieldVar LBRACK Exp RBRACK , {EOF LBRACK DOT }]
  [Var ::= (*) SubscriptVar , {EOF DOT }]
  [Exp ::= (*) Var , {EOF }]
  [SubscriptVar ::= (*) ID LBRACK Exp RBRACK , {EOF LBRACK DOT }]
  [Var ::= (*) FieldVar , {EOF DOT }]
  [Exp ::= (*) error , {EOF }]
  [SubscriptVar ::= (*) SubscriptVar LBRACK Exp RBRACK , {EOF LBRACK DOT }]
  [FieldVar ::= (*) Var DOT ID , {EOF LBRACK DOT }]
  [Var ::= (*) ID , {EOF DOT }]
  [$START ::= (*) Exp EOF , {EOF }]
}
transition on Var to state [6]
transition on SubscriptVar to state [5]
transition on Exp to state [4]
transition on error to state [3]
transition on FieldVar to state [2]
transition on ID to state [1]

-------------------
lalr_state [1]: {
  [SubscriptVar ::= ID (*) LBRACK Exp RBRACK , {EOF LBRACK RBRACK DOT }]
  [Var ::= ID (*) , {EOF RBRACK DOT }]
}
transition on LBRACK to state [16]

-------------------
lalr_state [2]: {
  [Var ::= FieldVar (*) , {EOF RBRACK DOT }]
  [SubscriptVar ::= FieldVar (*) LBRACK Exp RBRACK , {EOF LBRACK RBRACK DOT }]
}
transition on LBRACK to state [13]

-------------------
lalr_state [3]: {
  [Exp ::= error (*) , {EOF RBRACK }]
}

-------------------
lalr_state [4]: {
  [$START ::= Exp (*) EOF , {EOF }]
}
transition on EOF to state [12]

-------------------
lalr_state [5]: {
  [Var ::= SubscriptVar (*) , {EOF RBRACK DOT }]
  [SubscriptVar ::= SubscriptVar (*) LBRACK Exp RBRACK , {EOF LBRACK RBRACK DOT }]
}
transition on LBRACK to state [9]

-------------------
lalr_state [6]: {
  [Exp ::= Var (*) , {EOF RBRACK }]
  [FieldVar ::= Var (*) DOT ID , {EOF LBRACK RBRACK DOT }]
}
transition on DOT to state [7]

-------------------
lalr_state [7]: {
  [FieldVar ::= Var DOT (*) ID , {EOF LBRACK RBRACK DOT }]
}
transition on ID to state [8]

-------------------
lalr_state [8]: {
  [FieldVar ::= Var DOT ID (*) , {EOF LBRACK RBRACK DOT }]
}

-------------------
lalr_state [9]: {
  [SubscriptVar ::= (*) FieldVar LBRACK Exp RBRACK , {LBRACK RBRACK DOT }]
  [Var ::= (*) SubscriptVar , {RBRACK DOT }]
  [Exp ::= (*) Var , {RBRACK }]
  [SubscriptVar ::= (*) ID LBRACK Exp RBRACK , {LBRACK RBRACK DOT }]
  [Var ::= (*) FieldVar , {RBRACK DOT }]
  [Exp ::= (*) error , {RBRACK }]
  [SubscriptVar ::= SubscriptVar LBRACK (*) Exp RBRACK , {EOF LBRACK RBRACK DOT }]
  [SubscriptVar ::= (*) SubscriptVar LBRACK Exp RBRACK , {LBRACK RBRACK DOT }]
  [FieldVar ::= (*) Var DOT ID , {LBRACK RBRACK DOT }]
  [Var ::= (*) ID , {RBRACK DOT }]
}
transition on Var to state [6]
transition on SubscriptVar to state [5]
transition on Exp to state [10]
transition on error to state [3]
transition on FieldVar to state [2]
transition on ID to state [1]

-------------------
lalr_state [10]: {
  [SubscriptVar ::= SubscriptVar LBRACK Exp (*) RBRACK , {EOF LBRACK RBRACK DOT }]
}
transition on RBRACK to state [11]

-------------------
lalr_state [11]: {
  [SubscriptVar ::= SubscriptVar LBRACK Exp RBRACK (*) , {EOF LBRACK RBRACK DOT }]
}

-------------------
lalr_state [12]: {
  [$START ::= Exp EOF (*) , {EOF }]
}

-------------------
lalr_state [13]: {
  [SubscriptVar ::= FieldVar LBRACK (*) Exp RBRACK , {EOF LBRACK RBRACK DOT }]
  [SubscriptVar ::= (*) FieldVar LBRACK Exp RBRACK , {LBRACK RBRACK DOT }]
  [Var ::= (*) SubscriptVar , {RBRACK DOT }]
  [Exp ::= (*) Var , {RBRACK }]
  [SubscriptVar ::= (*) ID LBRACK Exp RBRACK , {LBRACK RBRACK DOT }]
  [Var ::= (*) FieldVar , {RBRACK DOT }]
  [Exp ::= (*) error , {RBRACK }]
  [SubscriptVar ::= (*) SubscriptVar LBRACK Exp RBRACK , {LBRACK RBRACK DOT }]
  [FieldVar ::= (*) Var DOT ID , {LBRACK RBRACK DOT }]
  [Var ::= (*) ID , {RBRACK DOT }]
}
transition on Var to state [6]
transition on SubscriptVar to state [5]
transition on Exp to state [14]
transition on error to state [3]
transition on FieldVar to state [2]
transition on ID to state [1]

-------------------
lalr_state [14]: {
  [SubscriptVar ::= FieldVar LBRACK Exp (*) RBRACK , {EOF LBRACK RBRACK DOT }]
}
transition on RBRACK to state [15]

-------------------
lalr_state [15]: {
  [SubscriptVar ::= FieldVar LBRACK Exp RBRACK (*) , {EOF LBRACK RBRACK DOT }]
}

-------------------
lalr_state [16]: {
  [SubscriptVar ::= (*) FieldVar LBRACK Exp RBRACK , {LBRACK RBRACK DOT }]
  [Var ::= (*) SubscriptVar , {RBRACK DOT }]
  [Exp ::= (*) Var , {RBRACK }]
  [SubscriptVar ::= ID LBRACK (*) Exp RBRACK , {EOF LBRACK RBRACK DOT }]
  [SubscriptVar ::= (*) ID LBRACK Exp RBRACK , {LBRACK RBRACK DOT }]
  [Var ::= (*) FieldVar , {RBRACK DOT }]
  [Exp ::= (*) error , {RBRACK }]
  [SubscriptVar ::= (*) SubscriptVar LBRACK Exp RBRACK , {LBRACK RBRACK DOT }]
  [FieldVar ::= (*) Var DOT ID , {LBRACK RBRACK DOT }]
  [Var ::= (*) ID , {RBRACK DOT }]
}
transition on Var to state [6]
transition on SubscriptVar to state [5]
transition on Exp to state [17]
transition on error to state [3]
transition on FieldVar to state [2]
transition on ID to state [1]

-------------------
lalr_state [17]: {
  [SubscriptVar ::= ID LBRACK Exp (*) RBRACK , {EOF LBRACK RBRACK DOT }]
}
transition on RBRACK to state [18]

-------------------
lalr_state [18]: {
  [SubscriptVar ::= ID LBRACK Exp RBRACK (*) , {EOF LBRACK RBRACK DOT }]
}

-------------------
Closing files...
------- CUP v0.10g Parser Generation Summary -------
  0 errors and 42 warnings
  45 terminals, 9 non terminals, and 13 productions declared, 
  producing 19 unique parse states.
  39 terminals declared but not used.
  0 non terminals declared but not used.
  0 productions never reduced.
  0 conflicts detected (3 expected).
  Code written to "Grm.java", and "sym.java".
---------------------------------------------------- (v0.10g)
