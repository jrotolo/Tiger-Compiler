Opening files...
Parsing specification from standard input...
Checking specification...
Warning: Terminal "DIVIDE" was declared but never used
Warning: Terminal "GE" was declared but never used
Warning: Terminal "MINUS" was declared but never used
Warning: Terminal "AND" was declared but never used
Warning: Terminal "LT" was declared but never used
Warning: Terminal "OR" was declared but never used
Warning: Terminal "PLUS" was declared but never used
Warning: Terminal "IF" was declared but never used
Warning: Terminal "LE" was declared but never used
Warning: Terminal "NEQ" was declared but never used
Warning: Terminal "TIMES" was declared but never used
Warning: Terminal "ELSE" was declared but never used
Warning: Terminal "THEN" was declared but never used
Warning: Terminal "GT" was declared but never used
Warning: Terminal "VAR" was declared but never used
Warning: Non terminal "OpExp" was declared but never used
Building parse tables...
  Computing non-terminal nullability...
  Computing first sets...
  Building state machine...
  Filling in tables...
*** Reduce/Reduce conflict found in state #76
  between ExpList ::= (*) 
  and     ExpList ::= Exp (*) 
  under symbols: {RPAREN, END}
  Resolved in favor of the first production.

*** Shift/Reduce conflict found in state #76
  between ExpList ::= (*) 
  under symbol RPAREN
  Resolved in favor of shifting.

*** Shift/Reduce conflict found in state #76
  between ExpList ::= (*) 
  under symbol END
  Resolved in favor of shifting.

*** Shift/Reduce conflict found in state #76
  between ExpList ::= Exp (*) 
  under symbol RPAREN
  Resolved in favor of shifting.

*** Shift/Reduce conflict found in state #76
  between ExpList ::= Exp (*) 
  under symbol END
  Resolved in favor of shifting.

*** Shift/Reduce conflict found in state #66
  between NextTypeDec ::= (*) 
  and     TypeDec ::= (*) TYPE ID EQ Ty NextTypeDec 
  under symbol TYPE
  Resolved in favor of shifting.

*** Shift/Reduce conflict found in state #49
  between NextFunctionDec ::= (*) 
  and     FunctionDec ::= (*) FUNCTION ID LPAREN FieldList RPAREN COLON NameTy EQ Exp NextFunctionDec 
  and     FunctionDec ::= (*) FUNCTION ID LPAREN FieldList RPAREN EQ Exp NextFunctionDec 
  under symbol FUNCTION
  Resolved in favor of shifting.

*** Shift/Reduce conflict found in state #46
  between NextFunctionDec ::= (*) 
  and     FunctionDec ::= (*) FUNCTION ID LPAREN FieldList RPAREN COLON NameTy EQ Exp NextFunctionDec 
  and     FunctionDec ::= (*) FUNCTION ID LPAREN FieldList RPAREN EQ Exp NextFunctionDec 
  under symbol FUNCTION
  Resolved in favor of shifting.

*** Reduce/Reduce conflict found in state #24
  between Dec ::= VarDec (*) 
  and     Dec ::= VarDec (*) 
  under symbols: {ID, IN, FUNCTION, TYPE}
  Resolved in favor of the second production.

*** Shift/Reduce conflict found in state #24
  between Dec ::= VarDec (*) 
  under symbol ID
  Resolved in favor of shifting.

*** Shift/Reduce conflict found in state #24
  between Dec ::= VarDec (*) 
  under symbol IN
  Resolved in favor of shifting.

*** Shift/Reduce conflict found in state #24
  between Dec ::= VarDec (*) 
  under symbol FUNCTION
  Resolved in favor of shifting.

*** Shift/Reduce conflict found in state #24
  between Dec ::= VarDec (*) 
  under symbol TYPE
  Resolved in favor of shifting.

*** Shift/Reduce conflict found in state #24
  between Dec ::= VarDec (*) 
  under symbol ID
  Resolved in favor of shifting.

*** Shift/Reduce conflict found in state #24
  between Dec ::= VarDec (*) 
  under symbol IN
  Resolved in favor of shifting.

*** Shift/Reduce conflict found in state #24
  between Dec ::= VarDec (*) 
  under symbol FUNCTION
  Resolved in favor of shifting.

*** Shift/Reduce conflict found in state #24
  between Dec ::= VarDec (*) 
  under symbol TYPE
  Resolved in favor of shifting.

*** Reduce/Reduce conflict found in state #27
  between Dec ::= TypeDec (*) 
  and     Dec ::= TypeDec (*) 
  under symbols: {ID, IN, FUNCTION, TYPE}
  Resolved in favor of the first production.

*** Shift/Reduce conflict found in state #27
  between Dec ::= TypeDec (*) 
  under symbol ID
  Resolved in favor of shifting.

*** Shift/Reduce conflict found in state #27
  between Dec ::= TypeDec (*) 
  under symbol IN
  Resolved in favor of shifting.

*** Shift/Reduce conflict found in state #27
  between Dec ::= TypeDec (*) 
  under symbol FUNCTION
  Resolved in favor of shifting.

*** Shift/Reduce conflict found in state #27
  between Dec ::= TypeDec (*) 
  under symbol TYPE
  Resolved in favor of shifting.

*** Shift/Reduce conflict found in state #27
  between Dec ::= TypeDec (*) 
  under symbol ID
  Resolved in favor of shifting.

*** Shift/Reduce conflict found in state #27
  between Dec ::= TypeDec (*) 
  under symbol IN
  Resolved in favor of shifting.

*** Shift/Reduce conflict found in state #27
  between Dec ::= TypeDec (*) 
  under symbol FUNCTION
  Resolved in favor of shifting.

*** Shift/Reduce conflict found in state #27
  between Dec ::= TypeDec (*) 
  under symbol TYPE
  Resolved in favor of shifting.

*** Reduce/Reduce conflict found in state #22
  between Dec ::= FunctionDec (*) 
  and     Dec ::= FunctionDec (*) 
  under symbols: {ID, IN, FUNCTION, TYPE}
  Resolved in favor of the second production.

*** Shift/Reduce conflict found in state #22
  between Dec ::= FunctionDec (*) 
  under symbol ID
  Resolved in favor of shifting.

*** Shift/Reduce conflict found in state #22
  between Dec ::= FunctionDec (*) 
  under symbol IN
  Resolved in favor of shifting.

*** Shift/Reduce conflict found in state #22
  between Dec ::= FunctionDec (*) 
  under symbol FUNCTION
  Resolved in favor of shifting.

*** Shift/Reduce conflict found in state #22
  between Dec ::= FunctionDec (*) 
  under symbol TYPE
  Resolved in favor of shifting.

*** Shift/Reduce conflict found in state #22
  between Dec ::= FunctionDec (*) 
  under symbol ID
  Resolved in favor of shifting.

*** Shift/Reduce conflict found in state #22
  between Dec ::= FunctionDec (*) 
  under symbol IN
  Resolved in favor of shifting.

*** Shift/Reduce conflict found in state #22
  between Dec ::= FunctionDec (*) 
  under symbol FUNCTION
  Resolved in favor of shifting.

*** Shift/Reduce conflict found in state #22
  between Dec ::= FunctionDec (*) 
  under symbol TYPE
  Resolved in favor of shifting.

  Checking for non-reduced productions...
*** Production "Dec ::= TypeDec " never reduced
*** Production "Dec ::= FunctionDec " never reduced
*** Production "Dec ::= VarDec " never reduced
*** Production "ExpList ::= Exp " never reduced
*** More conflicts encountered than expected -- parser generation aborted
===== Terminals =====
DIVIDE FUNCTION GE LPAREN INT 
ARRAY FOR MINUS RPAREN SEMICOLON 
AND LT TYPE NIL IN 
OR COMMA PLUS ASSIGN IF 
DOT ID LE OF EOF 
error NEQ BREAK EQ LBRACK 
TIMES COLON LBRACE ELSE RBRACK 
TO WHILE LET THEN RBRACE 
END STRING GT VAR DO 


===== Non terminals =====
Ty ForExp OpExp FieldList ArrayExp 
SubscriptVar DecList VarDec Var FieldVar 
NextFieldList LetExp WhileExp NameTy $START 
NextFunctionDec Exp FunctionDec AssignExp NextTypeDec 
SeqExp Dec ExpList TypeDec 

===== Productions =====
Dec ::= TypeDec 
Dec ::= FunctionDec 
Dec ::= VarDec 
SubscriptVar ::= SubscriptVar LBRACK Exp RBRACK 
SubscriptVar ::= FieldVar LBRACK Exp RBRACK 
SubscriptVar ::= ID LBRACK Exp RBRACK 
FieldVar ::= Var DOT ID 
Var ::= SubscriptVar 
Var ::= FieldVar 
Var ::= ID 
NextFieldList ::= COMMA ID COLON ID NextFieldList 
NextFieldList ::= 
FieldList ::= ID COLON ID NextFieldList 
FieldList ::= 
Ty ::= ARRAY OF ID 
Ty ::= LBRACE FieldList RBRACE 
Ty ::= ID 
NextTypeDec ::= TypeDec 
NextTypeDec ::= 
TypeDec ::= TYPE ID EQ Ty NextTypeDec 
NextFunctionDec ::= FunctionDec 
NextFunctionDec ::= 
FunctionDec ::= FUNCTION ID LPAREN FieldList RPAREN COLON NameTy EQ Exp NextFunctionDec 
FunctionDec ::= FUNCTION ID LPAREN FieldList RPAREN EQ Exp NextFunctionDec 
VarDec ::= Var ID NameTy ASSIGN Exp 
VarDec ::= Var ID ASSIGN Exp 
Dec ::= FunctionDec 
Dec ::= VarDec 
Dec ::= TypeDec 
DecList ::= Dec DecList 
DecList ::= Dec 
LetExp ::= LET DecList IN ExpList END 
WhileExp ::= WHILE Exp DO Exp 
ForExp ::= ID FOR ASSIGN Exp TO Exp DO Exp 
SeqExp ::= LPAREN Exp SEMICOLON ExpList RPAREN 
AssignExp ::= Var ASSIGN Exp 
ArrayExp ::= ID LBRACK Exp RBRACK OF Exp 
ExpList ::= Exp ExpList 
ExpList ::= Exp 
ExpList ::= 
Exp ::= WhileExp 
Exp ::= ForExp 
Exp ::= SeqExp 
Exp ::= AssignExp 
Exp ::= ArrayExp 
Exp ::= LetExp 
Exp ::= BREAK 
Exp ::= NIL 
Exp ::= INT 
Exp ::= STRING 
Exp ::= Var 
Exp ::= error 
$START ::= Exp EOF 

===== Viable Prefix Recognizer =====
START lalr_state [0]: {
  [Exp ::= (*) NIL , {EOF }]
  [Exp ::= (*) SeqExp , {EOF }]
  [WhileExp ::= (*) WHILE Exp DO Exp , {EOF }]
  [Var ::= (*) SubscriptVar , {EOF DOT ASSIGN }]
  [Exp ::= (*) STRING , {EOF }]
  [Exp ::= (*) ArrayExp , {EOF }]
  [SeqExp ::= (*) LPAREN Exp SEMICOLON ExpList RPAREN , {EOF }]
  [Var ::= (*) ID , {EOF DOT ASSIGN }]
  [SubscriptVar ::= (*) FieldVar LBRACK Exp RBRACK , {EOF LBRACK DOT ASSIGN }]
  [Exp ::= (*) error , {EOF }]
  [Exp ::= (*) BREAK , {EOF }]
  [Exp ::= (*) ForExp , {EOF }]
  [ArrayExp ::= (*) ID LBRACK Exp RBRACK OF Exp , {EOF }]
  [LetExp ::= (*) LET DecList IN ExpList END , {EOF }]
  [FieldVar ::= (*) Var DOT ID , {EOF LBRACK DOT ASSIGN }]
  [Exp ::= (*) INT , {EOF }]
  [Exp ::= (*) AssignExp , {EOF }]
  [ForExp ::= (*) ID FOR ASSIGN Exp TO Exp DO Exp , {EOF }]
  [Var ::= (*) FieldVar , {EOF DOT ASSIGN }]
  [SubscriptVar ::= (*) SubscriptVar LBRACK Exp RBRACK , {EOF LBRACK DOT ASSIGN }]
  [Exp ::= (*) Var , {EOF }]
  [Exp ::= (*) LetExp , {EOF }]
  [Exp ::= (*) WhileExp , {EOF }]
  [AssignExp ::= (*) Var ASSIGN Exp , {EOF }]
  [SubscriptVar ::= (*) ID LBRACK Exp RBRACK , {EOF LBRACK DOT ASSIGN }]
  [$START ::= (*) Exp EOF , {EOF }]
}
transition on SeqExp to state [19]
transition on LET to state [18]
transition on error to state [17]
transition on AssignExp to state [16]
transition on BREAK to state [15]
transition on Exp to state [14]
transition on STRING to state [13]
transition on ID to state [12]
transition on NIL to state [11]
transition on LetExp to state [10]
transition on LPAREN to state [9]
transition on WhileExp to state [8]
transition on FieldVar to state [7]
transition on WHILE to state [6]
transition on Var to state [5]
transition on INT to state [4]
transition on SubscriptVar to state [3]
transition on ArrayExp to state [2]
transition on ForExp to state [1]

-------------------
lalr_state [1]: {
  [Exp ::= ForExp (*) , {EOF error ID STRING INT SEMICOLON LPAREN RPAREN RBRACK WHILE TO DO LET IN END BREAK NIL FUNCTION TYPE }]
}

-------------------
lalr_state [2]: {
  [Exp ::= ArrayExp (*) , {EOF error ID STRING INT SEMICOLON LPAREN RPAREN RBRACK WHILE TO DO LET IN END BREAK NIL FUNCTION TYPE }]
}

-------------------
lalr_state [3]: {
  [SubscriptVar ::= SubscriptVar (*) LBRACK Exp RBRACK , {EOF error ID STRING INT SEMICOLON LPAREN RPAREN LBRACK RBRACK DOT ASSIGN WHILE TO DO LET IN END BREAK NIL FUNCTION TYPE }]
  [Var ::= SubscriptVar (*) , {EOF error ID STRING INT SEMICOLON LPAREN RPAREN RBRACK DOT ASSIGN WHILE TO DO LET IN END BREAK NIL FUNCTION TYPE }]
}
transition on LBRACK to state [105]

-------------------
lalr_state [4]: {
  [Exp ::= INT (*) , {EOF error ID STRING INT SEMICOLON LPAREN RPAREN RBRACK WHILE TO DO LET IN END BREAK NIL FUNCTION TYPE }]
}

-------------------
lalr_state [5]: {
  [Exp ::= Var (*) , {EOF error ID STRING INT SEMICOLON LPAREN RPAREN RBRACK WHILE TO DO LET IN END BREAK NIL FUNCTION TYPE }]
  [FieldVar ::= Var (*) DOT ID , {EOF error ID STRING INT SEMICOLON LPAREN RPAREN LBRACK RBRACK DOT ASSIGN WHILE TO DO LET IN END BREAK NIL FUNCTION TYPE }]
  [AssignExp ::= Var (*) ASSIGN Exp , {EOF error ID STRING INT SEMICOLON LPAREN RPAREN RBRACK WHILE TO DO LET IN END BREAK NIL FUNCTION TYPE }]
}
transition on DOT to state [30]
transition on ASSIGN to state [103]

-------------------
lalr_state [6]: {
  [Exp ::= (*) NIL , {DO }]
  [Exp ::= (*) SeqExp , {DO }]
  [WhileExp ::= WHILE (*) Exp DO Exp , {EOF error ID STRING INT SEMICOLON LPAREN RPAREN RBRACK WHILE TO DO LET IN END BREAK NIL FUNCTION TYPE }]
  [WhileExp ::= (*) WHILE Exp DO Exp , {DO }]
  [Var ::= (*) SubscriptVar , {DOT ASSIGN DO }]
  [Exp ::= (*) STRING , {DO }]
  [Exp ::= (*) ArrayExp , {DO }]
  [SeqExp ::= (*) LPAREN Exp SEMICOLON ExpList RPAREN , {DO }]
  [Var ::= (*) ID , {DOT ASSIGN DO }]
  [SubscriptVar ::= (*) FieldVar LBRACK Exp RBRACK , {LBRACK DOT ASSIGN DO }]
  [Exp ::= (*) error , {DO }]
  [Exp ::= (*) BREAK , {DO }]
  [Exp ::= (*) ForExp , {DO }]
  [ArrayExp ::= (*) ID LBRACK Exp RBRACK OF Exp , {DO }]
  [LetExp ::= (*) LET DecList IN ExpList END , {DO }]
  [FieldVar ::= (*) Var DOT ID , {LBRACK DOT ASSIGN DO }]
  [Exp ::= (*) INT , {DO }]
  [Exp ::= (*) AssignExp , {DO }]
  [ForExp ::= (*) ID FOR ASSIGN Exp TO Exp DO Exp , {DO }]
  [Var ::= (*) FieldVar , {DOT ASSIGN DO }]
  [SubscriptVar ::= (*) SubscriptVar LBRACK Exp RBRACK , {LBRACK DOT ASSIGN DO }]
  [Exp ::= (*) Var , {DO }]
  [Exp ::= (*) LetExp , {DO }]
  [Exp ::= (*) WhileExp , {DO }]
  [AssignExp ::= (*) Var ASSIGN Exp , {DO }]
  [SubscriptVar ::= (*) ID LBRACK Exp RBRACK , {LBRACK DOT ASSIGN DO }]
}
transition on SeqExp to state [19]
transition on LET to state [18]
transition on error to state [17]
transition on AssignExp to state [16]
transition on Exp to state [100]
transition on BREAK to state [15]
transition on STRING to state [13]
transition on ID to state [12]
transition on NIL to state [11]
transition on LPAREN to state [9]
transition on LetExp to state [10]
transition on WhileExp to state [8]
transition on FieldVar to state [7]
transition on WHILE to state [6]
transition on Var to state [5]
transition on INT to state [4]
transition on SubscriptVar to state [3]
transition on ArrayExp to state [2]
transition on ForExp to state [1]

-------------------
lalr_state [7]: {
  [SubscriptVar ::= FieldVar (*) LBRACK Exp RBRACK , {EOF error ID STRING INT SEMICOLON LPAREN RPAREN LBRACK RBRACK DOT ASSIGN WHILE TO DO LET IN END BREAK NIL FUNCTION TYPE }]
  [Var ::= FieldVar (*) , {EOF error ID STRING INT SEMICOLON LPAREN RPAREN RBRACK DOT ASSIGN WHILE TO DO LET IN END BREAK NIL FUNCTION TYPE }]
}
transition on LBRACK to state [97]

-------------------
lalr_state [8]: {
  [Exp ::= WhileExp (*) , {EOF error ID STRING INT SEMICOLON LPAREN RPAREN RBRACK WHILE TO DO LET IN END BREAK NIL FUNCTION TYPE }]
}

-------------------
lalr_state [9]: {
  [Exp ::= (*) NIL , {SEMICOLON }]
  [Exp ::= (*) SeqExp , {SEMICOLON }]
  [WhileExp ::= (*) WHILE Exp DO Exp , {SEMICOLON }]
  [Var ::= (*) SubscriptVar , {SEMICOLON DOT ASSIGN }]
  [Exp ::= (*) STRING , {SEMICOLON }]
  [Exp ::= (*) ArrayExp , {SEMICOLON }]
  [SeqExp ::= LPAREN (*) Exp SEMICOLON ExpList RPAREN , {EOF error ID STRING INT SEMICOLON LPAREN RPAREN RBRACK WHILE TO DO LET IN END BREAK NIL FUNCTION TYPE }]
  [SeqExp ::= (*) LPAREN Exp SEMICOLON ExpList RPAREN , {SEMICOLON }]
  [Var ::= (*) ID , {SEMICOLON DOT ASSIGN }]
  [SubscriptVar ::= (*) FieldVar LBRACK Exp RBRACK , {SEMICOLON LBRACK DOT ASSIGN }]
  [Exp ::= (*) error , {SEMICOLON }]
  [Exp ::= (*) BREAK , {SEMICOLON }]
  [Exp ::= (*) ForExp , {SEMICOLON }]
  [ArrayExp ::= (*) ID LBRACK Exp RBRACK OF Exp , {SEMICOLON }]
  [LetExp ::= (*) LET DecList IN ExpList END , {SEMICOLON }]
  [FieldVar ::= (*) Var DOT ID , {SEMICOLON LBRACK DOT ASSIGN }]
  [Exp ::= (*) INT , {SEMICOLON }]
  [Exp ::= (*) AssignExp , {SEMICOLON }]
  [ForExp ::= (*) ID FOR ASSIGN Exp TO Exp DO Exp , {SEMICOLON }]
  [Var ::= (*) FieldVar , {SEMICOLON DOT ASSIGN }]
  [SubscriptVar ::= (*) SubscriptVar LBRACK Exp RBRACK , {SEMICOLON LBRACK DOT ASSIGN }]
  [Exp ::= (*) Var , {SEMICOLON }]
  [Exp ::= (*) LetExp , {SEMICOLON }]
  [Exp ::= (*) WhileExp , {SEMICOLON }]
  [AssignExp ::= (*) Var ASSIGN Exp , {SEMICOLON }]
  [SubscriptVar ::= (*) ID LBRACK Exp RBRACK , {SEMICOLON LBRACK DOT ASSIGN }]
}
transition on SeqExp to state [19]
transition on LET to state [18]
transition on error to state [17]
transition on AssignExp to state [16]
transition on Exp to state [93]
transition on BREAK to state [15]
transition on STRING to state [13]
transition on ID to state [12]
transition on NIL to state [11]
transition on LPAREN to state [9]
transition on LetExp to state [10]
transition on WhileExp to state [8]
transition on FieldVar to state [7]
transition on WHILE to state [6]
transition on Var to state [5]
transition on INT to state [4]
transition on SubscriptVar to state [3]
transition on ArrayExp to state [2]
transition on ForExp to state [1]

-------------------
lalr_state [10]: {
  [Exp ::= LetExp (*) , {EOF error ID STRING INT SEMICOLON LPAREN RPAREN RBRACK WHILE TO DO LET IN END BREAK NIL FUNCTION TYPE }]
}

-------------------
lalr_state [11]: {
  [Exp ::= NIL (*) , {EOF error ID STRING INT SEMICOLON LPAREN RPAREN RBRACK WHILE TO DO LET IN END BREAK NIL FUNCTION TYPE }]
}

-------------------
lalr_state [12]: {
  [ArrayExp ::= ID (*) LBRACK Exp RBRACK OF Exp , {EOF error ID STRING INT SEMICOLON LPAREN RPAREN RBRACK WHILE TO DO LET IN END BREAK NIL FUNCTION TYPE }]
  [Var ::= ID (*) , {EOF error ID STRING INT SEMICOLON LPAREN RPAREN RBRACK DOT ASSIGN WHILE TO DO LET IN END BREAK NIL FUNCTION TYPE }]
  [SubscriptVar ::= ID (*) LBRACK Exp RBRACK , {EOF error ID STRING INT SEMICOLON LPAREN RPAREN LBRACK RBRACK DOT ASSIGN WHILE TO DO LET IN END BREAK NIL FUNCTION TYPE }]
  [ForExp ::= ID (*) FOR ASSIGN Exp TO Exp DO Exp , {EOF error ID STRING INT SEMICOLON LPAREN RPAREN RBRACK WHILE TO DO LET IN END BREAK NIL FUNCTION TYPE }]
}
transition on LBRACK to state [82]
transition on FOR to state [81]

-------------------
lalr_state [13]: {
  [Exp ::= STRING (*) , {EOF error ID STRING INT SEMICOLON LPAREN RPAREN RBRACK WHILE TO DO LET IN END BREAK NIL FUNCTION TYPE }]
}

-------------------
lalr_state [14]: {
  [$START ::= Exp (*) EOF , {EOF }]
}
transition on EOF to state [80]

-------------------
lalr_state [15]: {
  [Exp ::= BREAK (*) , {EOF error ID STRING INT SEMICOLON LPAREN RPAREN RBRACK WHILE TO DO LET IN END BREAK NIL FUNCTION TYPE }]
}

-------------------
lalr_state [16]: {
  [Exp ::= AssignExp (*) , {EOF error ID STRING INT SEMICOLON LPAREN RPAREN RBRACK WHILE TO DO LET IN END BREAK NIL FUNCTION TYPE }]
}

-------------------
lalr_state [17]: {
  [Exp ::= error (*) , {EOF error ID STRING INT SEMICOLON LPAREN RPAREN RBRACK WHILE TO DO LET IN END BREAK NIL FUNCTION TYPE }]
}

-------------------
lalr_state [18]: {
  [Dec ::= (*) TypeDec , {ID IN FUNCTION TYPE }]
  [Dec ::= (*) VarDec , {ID IN FUNCTION TYPE }]
  [FunctionDec ::= (*) FUNCTION ID LPAREN FieldList RPAREN COLON NameTy EQ Exp NextFunctionDec , {ID IN FUNCTION TYPE }]
  [Var ::= (*) SubscriptVar , {ID DOT }]
  [Dec ::= (*) VarDec , {ID IN FUNCTION TYPE }]
  [DecList ::= (*) Dec DecList , {IN }]
  [VarDec ::= (*) Var ID NameTy ASSIGN Exp , {ID IN FUNCTION TYPE }]
  [TypeDec ::= (*) TYPE ID EQ Ty NextTypeDec , {ID IN FUNCTION TYPE }]
  [Var ::= (*) ID , {ID DOT }]
  [SubscriptVar ::= (*) FieldVar LBRACK Exp RBRACK , {ID LBRACK DOT }]
  [LetExp ::= LET (*) DecList IN ExpList END , {EOF error ID STRING INT SEMICOLON LPAREN RPAREN RBRACK WHILE TO DO LET IN END BREAK NIL FUNCTION TYPE }]
  [Dec ::= (*) FunctionDec , {ID IN FUNCTION TYPE }]
  [FieldVar ::= (*) Var DOT ID , {ID LBRACK DOT }]
  [Dec ::= (*) FunctionDec , {ID IN FUNCTION TYPE }]
  [Dec ::= (*) TypeDec , {ID IN FUNCTION TYPE }]
  [FunctionDec ::= (*) FUNCTION ID LPAREN FieldList RPAREN EQ Exp NextFunctionDec , {ID IN FUNCTION TYPE }]
  [Var ::= (*) FieldVar , {ID DOT }]
  [SubscriptVar ::= (*) SubscriptVar LBRACK Exp RBRACK , {ID LBRACK DOT }]
  [DecList ::= (*) Dec , {IN }]
  [VarDec ::= (*) Var ID ASSIGN Exp , {ID IN FUNCTION TYPE }]
  [SubscriptVar ::= (*) ID LBRACK Exp RBRACK , {ID LBRACK DOT }]
}
transition on Var to state [28]
transition on TypeDec to state [27]
transition on FieldVar to state [7]
transition on FUNCTION to state [26]
transition on ID to state [25]
transition on VarDec to state [24]
transition on TYPE to state [23]
transition on FunctionDec to state [22]
transition on Dec to state [21]
transition on SubscriptVar to state [3]
transition on DecList to state [20]

-------------------
lalr_state [19]: {
  [Exp ::= SeqExp (*) , {EOF error ID STRING INT SEMICOLON LPAREN RPAREN RBRACK WHILE TO DO LET IN END BREAK NIL FUNCTION TYPE }]
}

-------------------
lalr_state [20]: {
  [LetExp ::= LET DecList (*) IN ExpList END , {EOF error ID STRING INT SEMICOLON LPAREN RPAREN RBRACK WHILE TO DO LET IN END BREAK NIL FUNCTION TYPE }]
}
transition on IN to state [75]

-------------------
lalr_state [21]: {
  [Dec ::= (*) TypeDec , {ID IN FUNCTION TYPE }]
  [Dec ::= (*) VarDec , {ID IN FUNCTION TYPE }]
  [FunctionDec ::= (*) FUNCTION ID LPAREN FieldList RPAREN COLON NameTy EQ Exp NextFunctionDec , {ID IN FUNCTION TYPE }]
  [Var ::= (*) SubscriptVar , {ID DOT }]
  [Dec ::= (*) VarDec , {ID IN FUNCTION TYPE }]
  [DecList ::= Dec (*) DecList , {IN }]
  [DecList ::= (*) Dec DecList , {IN }]
  [VarDec ::= (*) Var ID NameTy ASSIGN Exp , {ID IN FUNCTION TYPE }]
  [TypeDec ::= (*) TYPE ID EQ Ty NextTypeDec , {ID IN FUNCTION TYPE }]
  [Var ::= (*) ID , {ID DOT }]
  [SubscriptVar ::= (*) FieldVar LBRACK Exp RBRACK , {ID LBRACK DOT }]
  [Dec ::= (*) FunctionDec , {ID IN FUNCTION TYPE }]
  [FieldVar ::= (*) Var DOT ID , {ID LBRACK DOT }]
  [Dec ::= (*) FunctionDec , {ID IN FUNCTION TYPE }]
  [Dec ::= (*) TypeDec , {ID IN FUNCTION TYPE }]
  [FunctionDec ::= (*) FUNCTION ID LPAREN FieldList RPAREN EQ Exp NextFunctionDec , {ID IN FUNCTION TYPE }]
  [Var ::= (*) FieldVar , {ID DOT }]
  [SubscriptVar ::= (*) SubscriptVar LBRACK Exp RBRACK , {ID LBRACK DOT }]
  [DecList ::= Dec (*) , {IN }]
  [DecList ::= (*) Dec , {IN }]
  [VarDec ::= (*) Var ID ASSIGN Exp , {ID IN FUNCTION TYPE }]
  [SubscriptVar ::= (*) ID LBRACK Exp RBRACK , {ID LBRACK DOT }]
}
transition on Var to state [28]
transition on TypeDec to state [27]
transition on FieldVar to state [7]
transition on FUNCTION to state [26]
transition on ID to state [25]
transition on VarDec to state [24]
transition on TYPE to state [23]
transition on FunctionDec to state [22]
transition on Dec to state [21]
transition on SubscriptVar to state [3]
transition on DecList to state [74]

-------------------
lalr_state [22]: {
  [Dec ::= FunctionDec (*) , {ID IN FUNCTION TYPE }]
  [Dec ::= FunctionDec (*) , {ID IN FUNCTION TYPE }]
}

-------------------
lalr_state [23]: {
  [TypeDec ::= TYPE (*) ID EQ Ty NextTypeDec , {ID IN FUNCTION TYPE }]
}
transition on ID to state [62]

-------------------
lalr_state [24]: {
  [Dec ::= VarDec (*) , {ID IN FUNCTION TYPE }]
  [Dec ::= VarDec (*) , {ID IN FUNCTION TYPE }]
}

-------------------
lalr_state [25]: {
  [Var ::= ID (*) , {ID DOT }]
  [SubscriptVar ::= ID (*) LBRACK Exp RBRACK , {ID LBRACK DOT }]
}
transition on LBRACK to state [59]

-------------------
lalr_state [26]: {
  [FunctionDec ::= FUNCTION (*) ID LPAREN FieldList RPAREN EQ Exp NextFunctionDec , {ID IN FUNCTION TYPE }]
  [FunctionDec ::= FUNCTION (*) ID LPAREN FieldList RPAREN COLON NameTy EQ Exp NextFunctionDec , {ID IN FUNCTION TYPE }]
}
transition on ID to state [37]

-------------------
lalr_state [27]: {
  [Dec ::= TypeDec (*) , {ID IN FUNCTION TYPE }]
  [Dec ::= TypeDec (*) , {ID IN FUNCTION TYPE }]
}

-------------------
lalr_state [28]: {
  [VarDec ::= Var (*) ID ASSIGN Exp , {ID IN FUNCTION TYPE }]
  [FieldVar ::= Var (*) DOT ID , {ID LBRACK DOT }]
  [VarDec ::= Var (*) ID NameTy ASSIGN Exp , {ID IN FUNCTION TYPE }]
}
transition on DOT to state [30]
transition on ID to state [29]

-------------------
lalr_state [29]: {
  [VarDec ::= Var ID (*) NameTy ASSIGN Exp , {ID IN FUNCTION TYPE }]
  [VarDec ::= Var ID (*) ASSIGN Exp , {ID IN FUNCTION TYPE }]
}
transition on ASSIGN to state [33]
transition on NameTy to state [32]

-------------------
lalr_state [30]: {
  [FieldVar ::= Var DOT (*) ID , {EOF error ID STRING INT SEMICOLON LPAREN RPAREN LBRACK RBRACK DOT ASSIGN WHILE TO DO LET IN END BREAK NIL FUNCTION TYPE }]
}
transition on ID to state [31]

-------------------
lalr_state [31]: {
  [FieldVar ::= Var DOT ID (*) , {EOF error ID STRING INT SEMICOLON LPAREN RPAREN LBRACK RBRACK DOT ASSIGN WHILE TO DO LET IN END BREAK NIL FUNCTION TYPE }]
}

-------------------
lalr_state [32]: {
  [VarDec ::= Var ID NameTy (*) ASSIGN Exp , {ID IN FUNCTION TYPE }]
}
transition on ASSIGN to state [35]

-------------------
lalr_state [33]: {
  [Exp ::= (*) NIL , {ID IN FUNCTION TYPE }]
  [Exp ::= (*) SeqExp , {ID IN FUNCTION TYPE }]
  [WhileExp ::= (*) WHILE Exp DO Exp , {ID IN FUNCTION TYPE }]
  [Var ::= (*) SubscriptVar , {ID DOT ASSIGN IN FUNCTION TYPE }]
  [Exp ::= (*) STRING , {ID IN FUNCTION TYPE }]
  [Exp ::= (*) ArrayExp , {ID IN FUNCTION TYPE }]
  [SeqExp ::= (*) LPAREN Exp SEMICOLON ExpList RPAREN , {ID IN FUNCTION TYPE }]
  [Var ::= (*) ID , {ID DOT ASSIGN IN FUNCTION TYPE }]
  [SubscriptVar ::= (*) FieldVar LBRACK Exp RBRACK , {ID LBRACK DOT ASSIGN IN FUNCTION TYPE }]
  [Exp ::= (*) error , {ID IN FUNCTION TYPE }]
  [Exp ::= (*) BREAK , {ID IN FUNCTION TYPE }]
  [Exp ::= (*) ForExp , {ID IN FUNCTION TYPE }]
  [ArrayExp ::= (*) ID LBRACK Exp RBRACK OF Exp , {ID IN FUNCTION TYPE }]
  [LetExp ::= (*) LET DecList IN ExpList END , {ID IN FUNCTION TYPE }]
  [FieldVar ::= (*) Var DOT ID , {ID LBRACK DOT ASSIGN IN FUNCTION TYPE }]
  [Exp ::= (*) INT , {ID IN FUNCTION TYPE }]
  [Exp ::= (*) AssignExp , {ID IN FUNCTION TYPE }]
  [ForExp ::= (*) ID FOR ASSIGN Exp TO Exp DO Exp , {ID IN FUNCTION TYPE }]
  [Var ::= (*) FieldVar , {ID DOT ASSIGN IN FUNCTION TYPE }]
  [SubscriptVar ::= (*) SubscriptVar LBRACK Exp RBRACK , {ID LBRACK DOT ASSIGN IN FUNCTION TYPE }]
  [Exp ::= (*) Var , {ID IN FUNCTION TYPE }]
  [Exp ::= (*) LetExp , {ID IN FUNCTION TYPE }]
  [Exp ::= (*) WhileExp , {ID IN FUNCTION TYPE }]
  [VarDec ::= Var ID ASSIGN (*) Exp , {ID IN FUNCTION TYPE }]
  [AssignExp ::= (*) Var ASSIGN Exp , {ID IN FUNCTION TYPE }]
  [SubscriptVar ::= (*) ID LBRACK Exp RBRACK , {ID LBRACK DOT ASSIGN IN FUNCTION TYPE }]
}
transition on SeqExp to state [19]
transition on LET to state [18]
transition on error to state [17]
transition on AssignExp to state [16]
transition on BREAK to state [15]
transition on Exp to state [34]
transition on STRING to state [13]
transition on ID to state [12]
transition on NIL to state [11]
transition on LetExp to state [10]
transition on LPAREN to state [9]
transition on WhileExp to state [8]
transition on FieldVar to state [7]
transition on WHILE to state [6]
transition on Var to state [5]
transition on INT to state [4]
transition on SubscriptVar to state [3]
transition on ArrayExp to state [2]
transition on ForExp to state [1]

-------------------
lalr_state [34]: {
  [VarDec ::= Var ID ASSIGN Exp (*) , {ID IN FUNCTION TYPE }]
}

-------------------
lalr_state [35]: {
  [Exp ::= (*) NIL , {ID IN FUNCTION TYPE }]
  [Exp ::= (*) SeqExp , {ID IN FUNCTION TYPE }]
  [WhileExp ::= (*) WHILE Exp DO Exp , {ID IN FUNCTION TYPE }]
  [Var ::= (*) SubscriptVar , {ID DOT ASSIGN IN FUNCTION TYPE }]
  [Exp ::= (*) STRING , {ID IN FUNCTION TYPE }]
  [Exp ::= (*) ArrayExp , {ID IN FUNCTION TYPE }]
  [VarDec ::= Var ID NameTy ASSIGN (*) Exp , {ID IN FUNCTION TYPE }]
  [SeqExp ::= (*) LPAREN Exp SEMICOLON ExpList RPAREN , {ID IN FUNCTION TYPE }]
  [Var ::= (*) ID , {ID DOT ASSIGN IN FUNCTION TYPE }]
  [SubscriptVar ::= (*) FieldVar LBRACK Exp RBRACK , {ID LBRACK DOT ASSIGN IN FUNCTION TYPE }]
  [Exp ::= (*) error , {ID IN FUNCTION TYPE }]
  [Exp ::= (*) BREAK , {ID IN FUNCTION TYPE }]
  [Exp ::= (*) ForExp , {ID IN FUNCTION TYPE }]
  [ArrayExp ::= (*) ID LBRACK Exp RBRACK OF Exp , {ID IN FUNCTION TYPE }]
  [LetExp ::= (*) LET DecList IN ExpList END , {ID IN FUNCTION TYPE }]
  [FieldVar ::= (*) Var DOT ID , {ID LBRACK DOT ASSIGN IN FUNCTION TYPE }]
  [Exp ::= (*) INT , {ID IN FUNCTION TYPE }]
  [Exp ::= (*) AssignExp , {ID IN FUNCTION TYPE }]
  [ForExp ::= (*) ID FOR ASSIGN Exp TO Exp DO Exp , {ID IN FUNCTION TYPE }]
  [Var ::= (*) FieldVar , {ID DOT ASSIGN IN FUNCTION TYPE }]
  [SubscriptVar ::= (*) SubscriptVar LBRACK Exp RBRACK , {ID LBRACK DOT ASSIGN IN FUNCTION TYPE }]
  [Exp ::= (*) Var , {ID IN FUNCTION TYPE }]
  [Exp ::= (*) LetExp , {ID IN FUNCTION TYPE }]
  [Exp ::= (*) WhileExp , {ID IN FUNCTION TYPE }]
  [AssignExp ::= (*) Var ASSIGN Exp , {ID IN FUNCTION TYPE }]
  [SubscriptVar ::= (*) ID LBRACK Exp RBRACK , {ID LBRACK DOT ASSIGN IN FUNCTION TYPE }]
}
transition on SeqExp to state [19]
transition on LET to state [18]
transition on error to state [17]
transition on AssignExp to state [16]
transition on Exp to state [36]
transition on BREAK to state [15]
transition on STRING to state [13]
transition on ID to state [12]
transition on NIL to state [11]
transition on LPAREN to state [9]
transition on LetExp to state [10]
transition on WhileExp to state [8]
transition on FieldVar to state [7]
transition on WHILE to state [6]
transition on Var to state [5]
transition on INT to state [4]
transition on SubscriptVar to state [3]
transition on ArrayExp to state [2]
transition on ForExp to state [1]

-------------------
lalr_state [36]: {
  [VarDec ::= Var ID NameTy ASSIGN Exp (*) , {ID IN FUNCTION TYPE }]
}

-------------------
lalr_state [37]: {
  [FunctionDec ::= FUNCTION ID (*) LPAREN FieldList RPAREN EQ Exp NextFunctionDec , {ID IN FUNCTION TYPE }]
  [FunctionDec ::= FUNCTION ID (*) LPAREN FieldList RPAREN COLON NameTy EQ Exp NextFunctionDec , {ID IN FUNCTION TYPE }]
}
transition on LPAREN to state [38]

-------------------
lalr_state [38]: {
  [FunctionDec ::= FUNCTION ID LPAREN (*) FieldList RPAREN EQ Exp NextFunctionDec , {ID IN FUNCTION TYPE }]
  [FieldList ::= (*) ID COLON ID NextFieldList , {RPAREN }]
  [FieldList ::= (*) , {RPAREN }]
  [FunctionDec ::= FUNCTION ID LPAREN (*) FieldList RPAREN COLON NameTy EQ Exp NextFunctionDec , {ID IN FUNCTION TYPE }]
}
transition on FieldList to state [40]
transition on ID to state [39]

-------------------
lalr_state [39]: {
  [FieldList ::= ID (*) COLON ID NextFieldList , {RPAREN RBRACE }]
}
transition on COLON to state [51]

-------------------
lalr_state [40]: {
  [FunctionDec ::= FUNCTION ID LPAREN FieldList (*) RPAREN EQ Exp NextFunctionDec , {ID IN FUNCTION TYPE }]
  [FunctionDec ::= FUNCTION ID LPAREN FieldList (*) RPAREN COLON NameTy EQ Exp NextFunctionDec , {ID IN FUNCTION TYPE }]
}
transition on RPAREN to state [41]

-------------------
lalr_state [41]: {
  [FunctionDec ::= FUNCTION ID LPAREN FieldList RPAREN (*) COLON NameTy EQ Exp NextFunctionDec , {ID IN FUNCTION TYPE }]
  [FunctionDec ::= FUNCTION ID LPAREN FieldList RPAREN (*) EQ Exp NextFunctionDec , {ID IN FUNCTION TYPE }]
}
transition on COLON to state [43]
transition on EQ to state [42]

-------------------
lalr_state [42]: {
  [Exp ::= (*) NIL , {ID IN FUNCTION TYPE }]
  [Exp ::= (*) SeqExp , {ID IN FUNCTION TYPE }]
  [WhileExp ::= (*) WHILE Exp DO Exp , {ID IN FUNCTION TYPE }]
  [Var ::= (*) SubscriptVar , {ID DOT ASSIGN IN FUNCTION TYPE }]
  [Exp ::= (*) STRING , {ID IN FUNCTION TYPE }]
  [Exp ::= (*) ArrayExp , {ID IN FUNCTION TYPE }]
  [SeqExp ::= (*) LPAREN Exp SEMICOLON ExpList RPAREN , {ID IN FUNCTION TYPE }]
  [Var ::= (*) ID , {ID DOT ASSIGN IN FUNCTION TYPE }]
  [SubscriptVar ::= (*) FieldVar LBRACK Exp RBRACK , {ID LBRACK DOT ASSIGN IN FUNCTION TYPE }]
  [Exp ::= (*) error , {ID IN FUNCTION TYPE }]
  [Exp ::= (*) BREAK , {ID IN FUNCTION TYPE }]
  [Exp ::= (*) ForExp , {ID IN FUNCTION TYPE }]
  [ArrayExp ::= (*) ID LBRACK Exp RBRACK OF Exp , {ID IN FUNCTION TYPE }]
  [LetExp ::= (*) LET DecList IN ExpList END , {ID IN FUNCTION TYPE }]
  [FieldVar ::= (*) Var DOT ID , {ID LBRACK DOT ASSIGN IN FUNCTION TYPE }]
  [FunctionDec ::= FUNCTION ID LPAREN FieldList RPAREN EQ (*) Exp NextFunctionDec , {ID IN FUNCTION TYPE }]
  [Exp ::= (*) INT , {ID IN FUNCTION TYPE }]
  [Exp ::= (*) AssignExp , {ID IN FUNCTION TYPE }]
  [ForExp ::= (*) ID FOR ASSIGN Exp TO Exp DO Exp , {ID IN FUNCTION TYPE }]
  [Var ::= (*) FieldVar , {ID DOT ASSIGN IN FUNCTION TYPE }]
  [SubscriptVar ::= (*) SubscriptVar LBRACK Exp RBRACK , {ID LBRACK DOT ASSIGN IN FUNCTION TYPE }]
  [Exp ::= (*) Var , {ID IN FUNCTION TYPE }]
  [Exp ::= (*) LetExp , {ID IN FUNCTION TYPE }]
  [Exp ::= (*) WhileExp , {ID IN FUNCTION TYPE }]
  [AssignExp ::= (*) Var ASSIGN Exp , {ID IN FUNCTION TYPE }]
  [SubscriptVar ::= (*) ID LBRACK Exp RBRACK , {ID LBRACK DOT ASSIGN IN FUNCTION TYPE }]
}
transition on SeqExp to state [19]
transition on LET to state [18]
transition on error to state [17]
transition on AssignExp to state [16]
transition on Exp to state [49]
transition on BREAK to state [15]
transition on STRING to state [13]
transition on ID to state [12]
transition on NIL to state [11]
transition on LPAREN to state [9]
transition on LetExp to state [10]
transition on WhileExp to state [8]
transition on FieldVar to state [7]
transition on WHILE to state [6]
transition on Var to state [5]
transition on INT to state [4]
transition on SubscriptVar to state [3]
transition on ArrayExp to state [2]
transition on ForExp to state [1]

-------------------
lalr_state [43]: {
  [FunctionDec ::= FUNCTION ID LPAREN FieldList RPAREN COLON (*) NameTy EQ Exp NextFunctionDec , {ID IN FUNCTION TYPE }]
}
transition on NameTy to state [44]

-------------------
lalr_state [44]: {
  [FunctionDec ::= FUNCTION ID LPAREN FieldList RPAREN COLON NameTy (*) EQ Exp NextFunctionDec , {ID IN FUNCTION TYPE }]
}
transition on EQ to state [45]

-------------------
lalr_state [45]: {
  [Exp ::= (*) NIL , {ID IN FUNCTION TYPE }]
  [Exp ::= (*) SeqExp , {ID IN FUNCTION TYPE }]
  [WhileExp ::= (*) WHILE Exp DO Exp , {ID IN FUNCTION TYPE }]
  [Var ::= (*) SubscriptVar , {ID DOT ASSIGN IN FUNCTION TYPE }]
  [Exp ::= (*) STRING , {ID IN FUNCTION TYPE }]
  [Exp ::= (*) ArrayExp , {ID IN FUNCTION TYPE }]
  [SeqExp ::= (*) LPAREN Exp SEMICOLON ExpList RPAREN , {ID IN FUNCTION TYPE }]
  [Var ::= (*) ID , {ID DOT ASSIGN IN FUNCTION TYPE }]
  [SubscriptVar ::= (*) FieldVar LBRACK Exp RBRACK , {ID LBRACK DOT ASSIGN IN FUNCTION TYPE }]
  [Exp ::= (*) error , {ID IN FUNCTION TYPE }]
  [Exp ::= (*) BREAK , {ID IN FUNCTION TYPE }]
  [Exp ::= (*) ForExp , {ID IN FUNCTION TYPE }]
  [ArrayExp ::= (*) ID LBRACK Exp RBRACK OF Exp , {ID IN FUNCTION TYPE }]
  [LetExp ::= (*) LET DecList IN ExpList END , {ID IN FUNCTION TYPE }]
  [FieldVar ::= (*) Var DOT ID , {ID LBRACK DOT ASSIGN IN FUNCTION TYPE }]
  [Exp ::= (*) INT , {ID IN FUNCTION TYPE }]
  [Exp ::= (*) AssignExp , {ID IN FUNCTION TYPE }]
  [ForExp ::= (*) ID FOR ASSIGN Exp TO Exp DO Exp , {ID IN FUNCTION TYPE }]
  [Var ::= (*) FieldVar , {ID DOT ASSIGN IN FUNCTION TYPE }]
  [SubscriptVar ::= (*) SubscriptVar LBRACK Exp RBRACK , {ID LBRACK DOT ASSIGN IN FUNCTION TYPE }]
  [Exp ::= (*) Var , {ID IN FUNCTION TYPE }]
  [Exp ::= (*) LetExp , {ID IN FUNCTION TYPE }]
  [Exp ::= (*) WhileExp , {ID IN FUNCTION TYPE }]
  [AssignExp ::= (*) Var ASSIGN Exp , {ID IN FUNCTION TYPE }]
  [FunctionDec ::= FUNCTION ID LPAREN FieldList RPAREN COLON NameTy EQ (*) Exp NextFunctionDec , {ID IN FUNCTION TYPE }]
  [SubscriptVar ::= (*) ID LBRACK Exp RBRACK , {ID LBRACK DOT ASSIGN IN FUNCTION TYPE }]
}
transition on SeqExp to state [19]
transition on LET to state [18]
transition on error to state [17]
transition on AssignExp to state [16]
transition on BREAK to state [15]
transition on Exp to state [46]
transition on STRING to state [13]
transition on ID to state [12]
transition on NIL to state [11]
transition on LetExp to state [10]
transition on LPAREN to state [9]
transition on WhileExp to state [8]
transition on FieldVar to state [7]
transition on WHILE to state [6]
transition on Var to state [5]
transition on INT to state [4]
transition on SubscriptVar to state [3]
transition on ArrayExp to state [2]
transition on ForExp to state [1]

-------------------
lalr_state [46]: {
  [FunctionDec ::= (*) FUNCTION ID LPAREN FieldList RPAREN COLON NameTy EQ Exp NextFunctionDec , {ID IN FUNCTION TYPE }]
  [FunctionDec ::= FUNCTION ID LPAREN FieldList RPAREN COLON NameTy EQ Exp (*) NextFunctionDec , {ID IN FUNCTION TYPE }]
  [NextFunctionDec ::= (*) FunctionDec , {ID IN FUNCTION TYPE }]
  [FunctionDec ::= (*) FUNCTION ID LPAREN FieldList RPAREN EQ Exp NextFunctionDec , {ID IN FUNCTION TYPE }]
  [NextFunctionDec ::= (*) , {ID IN FUNCTION TYPE }]
}
transition on FUNCTION to state [26]
transition on NextFunctionDec to state [48]
transition on FunctionDec to state [47]

-------------------
lalr_state [47]: {
  [NextFunctionDec ::= FunctionDec (*) , {ID IN FUNCTION TYPE }]
}

-------------------
lalr_state [48]: {
  [FunctionDec ::= FUNCTION ID LPAREN FieldList RPAREN COLON NameTy EQ Exp NextFunctionDec (*) , {ID IN FUNCTION TYPE }]
}

-------------------
lalr_state [49]: {
  [FunctionDec ::= (*) FUNCTION ID LPAREN FieldList RPAREN COLON NameTy EQ Exp NextFunctionDec , {ID IN FUNCTION TYPE }]
  [NextFunctionDec ::= (*) FunctionDec , {ID IN FUNCTION TYPE }]
  [FunctionDec ::= (*) FUNCTION ID LPAREN FieldList RPAREN EQ Exp NextFunctionDec , {ID IN FUNCTION TYPE }]
  [NextFunctionDec ::= (*) , {ID IN FUNCTION TYPE }]
  [FunctionDec ::= FUNCTION ID LPAREN FieldList RPAREN EQ Exp (*) NextFunctionDec , {ID IN FUNCTION TYPE }]
}
transition on FUNCTION to state [26]
transition on NextFunctionDec to state [50]
transition on FunctionDec to state [47]

-------------------
lalr_state [50]: {
  [FunctionDec ::= FUNCTION ID LPAREN FieldList RPAREN EQ Exp NextFunctionDec (*) , {ID IN FUNCTION TYPE }]
}

-------------------
lalr_state [51]: {
  [FieldList ::= ID COLON (*) ID NextFieldList , {RPAREN RBRACE }]
}
transition on ID to state [52]

-------------------
lalr_state [52]: {
  [NextFieldList ::= (*) , {RPAREN RBRACE }]
  [FieldList ::= ID COLON ID (*) NextFieldList , {RPAREN RBRACE }]
  [NextFieldList ::= (*) COMMA ID COLON ID NextFieldList , {RPAREN RBRACE }]
}
transition on NextFieldList to state [54]
transition on COMMA to state [53]

-------------------
lalr_state [53]: {
  [NextFieldList ::= COMMA (*) ID COLON ID NextFieldList , {RPAREN RBRACE }]
}
transition on ID to state [55]

-------------------
lalr_state [54]: {
  [FieldList ::= ID COLON ID NextFieldList (*) , {RPAREN RBRACE }]
}

-------------------
lalr_state [55]: {
  [NextFieldList ::= COMMA ID (*) COLON ID NextFieldList , {RPAREN RBRACE }]
}
transition on COLON to state [56]

-------------------
lalr_state [56]: {
  [NextFieldList ::= COMMA ID COLON (*) ID NextFieldList , {RPAREN RBRACE }]
}
transition on ID to state [57]

-------------------
lalr_state [57]: {
  [NextFieldList ::= (*) , {RPAREN RBRACE }]
  [NextFieldList ::= COMMA ID COLON ID (*) NextFieldList , {RPAREN RBRACE }]
  [NextFieldList ::= (*) COMMA ID COLON ID NextFieldList , {RPAREN RBRACE }]
}
transition on NextFieldList to state [58]
transition on COMMA to state [53]

-------------------
lalr_state [58]: {
  [NextFieldList ::= COMMA ID COLON ID NextFieldList (*) , {RPAREN RBRACE }]
}

-------------------
lalr_state [59]: {
  [Exp ::= (*) NIL , {RBRACK }]
  [Exp ::= (*) SeqExp , {RBRACK }]
  [WhileExp ::= (*) WHILE Exp DO Exp , {RBRACK }]
  [Var ::= (*) SubscriptVar , {RBRACK DOT ASSIGN }]
  [Exp ::= (*) STRING , {RBRACK }]
  [Exp ::= (*) ArrayExp , {RBRACK }]
  [SeqExp ::= (*) LPAREN Exp SEMICOLON ExpList RPAREN , {RBRACK }]
  [Var ::= (*) ID , {RBRACK DOT ASSIGN }]
  [SubscriptVar ::= (*) FieldVar LBRACK Exp RBRACK , {LBRACK RBRACK DOT ASSIGN }]
  [Exp ::= (*) error , {RBRACK }]
  [Exp ::= (*) BREAK , {RBRACK }]
  [Exp ::= (*) ForExp , {RBRACK }]
  [ArrayExp ::= (*) ID LBRACK Exp RBRACK OF Exp , {RBRACK }]
  [LetExp ::= (*) LET DecList IN ExpList END , {RBRACK }]
  [FieldVar ::= (*) Var DOT ID , {LBRACK RBRACK DOT ASSIGN }]
  [Exp ::= (*) INT , {RBRACK }]
  [Exp ::= (*) AssignExp , {RBRACK }]
  [ForExp ::= (*) ID FOR ASSIGN Exp TO Exp DO Exp , {RBRACK }]
  [Var ::= (*) FieldVar , {RBRACK DOT ASSIGN }]
  [SubscriptVar ::= (*) SubscriptVar LBRACK Exp RBRACK , {LBRACK RBRACK DOT ASSIGN }]
  [Exp ::= (*) Var , {RBRACK }]
  [Exp ::= (*) LetExp , {RBRACK }]
  [Exp ::= (*) WhileExp , {RBRACK }]
  [AssignExp ::= (*) Var ASSIGN Exp , {RBRACK }]
  [SubscriptVar ::= ID LBRACK (*) Exp RBRACK , {ID LBRACK DOT }]
  [SubscriptVar ::= (*) ID LBRACK Exp RBRACK , {LBRACK RBRACK DOT ASSIGN }]
}
transition on SeqExp to state [19]
transition on LET to state [18]
transition on error to state [17]
transition on AssignExp to state [16]
transition on BREAK to state [15]
transition on Exp to state [60]
transition on STRING to state [13]
transition on ID to state [12]
transition on NIL to state [11]
transition on LetExp to state [10]
transition on LPAREN to state [9]
transition on WhileExp to state [8]
transition on FieldVar to state [7]
transition on WHILE to state [6]
transition on Var to state [5]
transition on INT to state [4]
transition on SubscriptVar to state [3]
transition on ArrayExp to state [2]
transition on ForExp to state [1]

-------------------
lalr_state [60]: {
  [SubscriptVar ::= ID LBRACK Exp (*) RBRACK , {ID LBRACK DOT }]
}
transition on RBRACK to state [61]

-------------------
lalr_state [61]: {
  [SubscriptVar ::= ID LBRACK Exp RBRACK (*) , {ID LBRACK DOT }]
}

-------------------
lalr_state [62]: {
  [TypeDec ::= TYPE ID (*) EQ Ty NextTypeDec , {ID IN FUNCTION TYPE }]
}
transition on EQ to state [63]

-------------------
lalr_state [63]: {
  [Ty ::= (*) ARRAY OF ID , {ID IN FUNCTION TYPE }]
  [Ty ::= (*) LBRACE FieldList RBRACE , {ID IN FUNCTION TYPE }]
  [TypeDec ::= TYPE ID EQ (*) Ty NextTypeDec , {ID IN FUNCTION TYPE }]
  [Ty ::= (*) ID , {ID IN FUNCTION TYPE }]
}
transition on ARRAY to state [67]
transition on Ty to state [66]
transition on LBRACE to state [65]
transition on ID to state [64]

-------------------
lalr_state [64]: {
  [Ty ::= ID (*) , {ID IN FUNCTION TYPE }]
}

-------------------
lalr_state [65]: {
  [FieldList ::= (*) ID COLON ID NextFieldList , {RBRACE }]
  [Ty ::= LBRACE (*) FieldList RBRACE , {ID IN FUNCTION TYPE }]
  [FieldList ::= (*) , {RBRACE }]
}
transition on FieldList to state [72]
transition on ID to state [39]

-------------------
lalr_state [66]: {
  [NextTypeDec ::= (*) TypeDec , {ID IN FUNCTION TYPE }]
  [NextTypeDec ::= (*) , {ID IN FUNCTION TYPE }]
  [TypeDec ::= TYPE ID EQ Ty (*) NextTypeDec , {ID IN FUNCTION TYPE }]
  [TypeDec ::= (*) TYPE ID EQ Ty NextTypeDec , {ID IN FUNCTION TYPE }]
}
transition on TypeDec to state [71]
transition on TYPE to state [23]
transition on NextTypeDec to state [70]

-------------------
lalr_state [67]: {
  [Ty ::= ARRAY (*) OF ID , {ID IN FUNCTION TYPE }]
}
transition on OF to state [68]

-------------------
lalr_state [68]: {
  [Ty ::= ARRAY OF (*) ID , {ID IN FUNCTION TYPE }]
}
transition on ID to state [69]

-------------------
lalr_state [69]: {
  [Ty ::= ARRAY OF ID (*) , {ID IN FUNCTION TYPE }]
}

-------------------
lalr_state [70]: {
  [TypeDec ::= TYPE ID EQ Ty NextTypeDec (*) , {ID IN FUNCTION TYPE }]
}

-------------------
lalr_state [71]: {
  [NextTypeDec ::= TypeDec (*) , {ID IN FUNCTION TYPE }]
}

-------------------
lalr_state [72]: {
  [Ty ::= LBRACE FieldList (*) RBRACE , {ID IN FUNCTION TYPE }]
}
transition on RBRACE to state [73]

-------------------
lalr_state [73]: {
  [Ty ::= LBRACE FieldList RBRACE (*) , {ID IN FUNCTION TYPE }]
}

-------------------
lalr_state [74]: {
  [DecList ::= Dec DecList (*) , {IN }]
}

-------------------
lalr_state [75]: {
  [Exp ::= (*) NIL , {error ID STRING INT LPAREN WHILE LET END BREAK NIL }]
  [Exp ::= (*) SeqExp , {error ID STRING INT LPAREN WHILE LET END BREAK NIL }]
  [ExpList ::= (*) Exp ExpList , {END }]
  [WhileExp ::= (*) WHILE Exp DO Exp , {error ID STRING INT LPAREN WHILE LET END BREAK NIL }]
  [Var ::= (*) SubscriptVar , {error ID STRING INT LPAREN DOT ASSIGN WHILE LET END BREAK NIL }]
  [Exp ::= (*) STRING , {error ID STRING INT LPAREN WHILE LET END BREAK NIL }]
  [Exp ::= (*) ArrayExp , {error ID STRING INT LPAREN WHILE LET END BREAK NIL }]
  [ExpList ::= (*) , {END }]
  [SeqExp ::= (*) LPAREN Exp SEMICOLON ExpList RPAREN , {error ID STRING INT LPAREN WHILE LET END BREAK NIL }]
  [Var ::= (*) ID , {error ID STRING INT LPAREN DOT ASSIGN WHILE LET END BREAK NIL }]
  [SubscriptVar ::= (*) FieldVar LBRACK Exp RBRACK , {error ID STRING INT LPAREN LBRACK DOT ASSIGN WHILE LET END BREAK NIL }]
  [Exp ::= (*) error , {error ID STRING INT LPAREN WHILE LET END BREAK NIL }]
  [Exp ::= (*) BREAK , {error ID STRING INT LPAREN WHILE LET END BREAK NIL }]
  [LetExp ::= LET DecList IN (*) ExpList END , {EOF error ID STRING INT SEMICOLON LPAREN RPAREN RBRACK WHILE TO DO LET IN END BREAK NIL FUNCTION TYPE }]
  [Exp ::= (*) ForExp , {error ID STRING INT LPAREN WHILE LET END BREAK NIL }]
  [ArrayExp ::= (*) ID LBRACK Exp RBRACK OF Exp , {error ID STRING INT LPAREN WHILE LET END BREAK NIL }]
  [LetExp ::= (*) LET DecList IN ExpList END , {error ID STRING INT LPAREN WHILE LET END BREAK NIL }]
  [FieldVar ::= (*) Var DOT ID , {error ID STRING INT LPAREN LBRACK DOT ASSIGN WHILE LET END BREAK NIL }]
  [Exp ::= (*) INT , {error ID STRING INT LPAREN WHILE LET END BREAK NIL }]
  [Exp ::= (*) AssignExp , {error ID STRING INT LPAREN WHILE LET END BREAK NIL }]
  [ExpList ::= (*) Exp , {END }]
  [ForExp ::= (*) ID FOR ASSIGN Exp TO Exp DO Exp , {error ID STRING INT LPAREN WHILE LET END BREAK NIL }]
  [Var ::= (*) FieldVar , {error ID STRING INT LPAREN DOT ASSIGN WHILE LET END BREAK NIL }]
  [SubscriptVar ::= (*) SubscriptVar LBRACK Exp RBRACK , {error ID STRING INT LPAREN LBRACK DOT ASSIGN WHILE LET END BREAK NIL }]
  [Exp ::= (*) Var , {error ID STRING INT LPAREN WHILE LET END BREAK NIL }]
  [Exp ::= (*) LetExp , {error ID STRING INT LPAREN WHILE LET END BREAK NIL }]
  [Exp ::= (*) WhileExp , {error ID STRING INT LPAREN WHILE LET END BREAK NIL }]
  [AssignExp ::= (*) Var ASSIGN Exp , {error ID STRING INT LPAREN WHILE LET END BREAK NIL }]
  [SubscriptVar ::= (*) ID LBRACK Exp RBRACK , {error ID STRING INT LPAREN LBRACK DOT ASSIGN WHILE LET END BREAK NIL }]
}
transition on ExpList to state [77]
transition on SeqExp to state [19]
transition on LET to state [18]
transition on error to state [17]
transition on AssignExp to state [16]
transition on Exp to state [76]
transition on BREAK to state [15]
transition on STRING to state [13]
transition on ID to state [12]
transition on NIL to state [11]
transition on LPAREN to state [9]
transition on LetExp to state [10]
transition on WhileExp to state [8]
transition on FieldVar to state [7]
transition on WHILE to state [6]
transition on Var to state [5]
transition on INT to state [4]
transition on SubscriptVar to state [3]
transition on ArrayExp to state [2]
transition on ForExp to state [1]

-------------------
lalr_state [76]: {
  [Exp ::= (*) NIL , {error ID STRING INT LPAREN RPAREN WHILE LET END BREAK NIL }]
  [ExpList ::= Exp (*) ExpList , {RPAREN END }]
  [Exp ::= (*) SeqExp , {error ID STRING INT LPAREN RPAREN WHILE LET END BREAK NIL }]
  [ExpList ::= (*) Exp ExpList , {RPAREN END }]
  [WhileExp ::= (*) WHILE Exp DO Exp , {error ID STRING INT LPAREN RPAREN WHILE LET END BREAK NIL }]
  [Var ::= (*) SubscriptVar , {error ID STRING INT LPAREN RPAREN DOT ASSIGN WHILE LET END BREAK NIL }]
  [Exp ::= (*) STRING , {error ID STRING INT LPAREN RPAREN WHILE LET END BREAK NIL }]
  [Exp ::= (*) ArrayExp , {error ID STRING INT LPAREN RPAREN WHILE LET END BREAK NIL }]
  [ExpList ::= (*) , {RPAREN END }]
  [SeqExp ::= (*) LPAREN Exp SEMICOLON ExpList RPAREN , {error ID STRING INT LPAREN RPAREN WHILE LET END BREAK NIL }]
  [Var ::= (*) ID , {error ID STRING INT LPAREN RPAREN DOT ASSIGN WHILE LET END BREAK NIL }]
  [SubscriptVar ::= (*) FieldVar LBRACK Exp RBRACK , {error ID STRING INT LPAREN RPAREN LBRACK DOT ASSIGN WHILE LET END BREAK NIL }]
  [Exp ::= (*) error , {error ID STRING INT LPAREN RPAREN WHILE LET END BREAK NIL }]
  [Exp ::= (*) BREAK , {error ID STRING INT LPAREN RPAREN WHILE LET END BREAK NIL }]
  [Exp ::= (*) ForExp , {error ID STRING INT LPAREN RPAREN WHILE LET END BREAK NIL }]
  [ArrayExp ::= (*) ID LBRACK Exp RBRACK OF Exp , {error ID STRING INT LPAREN RPAREN WHILE LET END BREAK NIL }]
  [LetExp ::= (*) LET DecList IN ExpList END , {error ID STRING INT LPAREN RPAREN WHILE LET END BREAK NIL }]
  [FieldVar ::= (*) Var DOT ID , {error ID STRING INT LPAREN RPAREN LBRACK DOT ASSIGN WHILE LET END BREAK NIL }]
  [Exp ::= (*) INT , {error ID STRING INT LPAREN RPAREN WHILE LET END BREAK NIL }]
  [Exp ::= (*) AssignExp , {error ID STRING INT LPAREN RPAREN WHILE LET END BREAK NIL }]
  [ExpList ::= Exp (*) , {RPAREN END }]
  [ExpList ::= (*) Exp , {RPAREN END }]
  [ForExp ::= (*) ID FOR ASSIGN Exp TO Exp DO Exp , {error ID STRING INT LPAREN RPAREN WHILE LET END BREAK NIL }]
  [Var ::= (*) FieldVar , {error ID STRING INT LPAREN RPAREN DOT ASSIGN WHILE LET END BREAK NIL }]
  [SubscriptVar ::= (*) SubscriptVar LBRACK Exp RBRACK , {error ID STRING INT LPAREN RPAREN LBRACK DOT ASSIGN WHILE LET END BREAK NIL }]
  [Exp ::= (*) Var , {error ID STRING INT LPAREN RPAREN WHILE LET END BREAK NIL }]
  [Exp ::= (*) LetExp , {error ID STRING INT LPAREN RPAREN WHILE LET END BREAK NIL }]
  [Exp ::= (*) WhileExp , {error ID STRING INT LPAREN RPAREN WHILE LET END BREAK NIL }]
  [AssignExp ::= (*) Var ASSIGN Exp , {error ID STRING INT LPAREN RPAREN WHILE LET END BREAK NIL }]
  [SubscriptVar ::= (*) ID LBRACK Exp RBRACK , {error ID STRING INT LPAREN RPAREN LBRACK DOT ASSIGN WHILE LET END BREAK NIL }]
}
transition on ExpList to state [79]
transition on SeqExp to state [19]
transition on LET to state [18]
transition on error to state [17]
transition on AssignExp to state [16]
transition on Exp to state [76]
transition on BREAK to state [15]
transition on STRING to state [13]
transition on ID to state [12]
transition on NIL to state [11]
transition on LPAREN to state [9]
transition on LetExp to state [10]
transition on WhileExp to state [8]
transition on FieldVar to state [7]
transition on WHILE to state [6]
transition on Var to state [5]
transition on INT to state [4]
transition on SubscriptVar to state [3]
transition on ArrayExp to state [2]
transition on ForExp to state [1]

-------------------
lalr_state [77]: {
  [LetExp ::= LET DecList IN ExpList (*) END , {EOF error ID STRING INT SEMICOLON LPAREN RPAREN RBRACK WHILE TO DO LET IN END BREAK NIL FUNCTION TYPE }]
}
transition on END to state [78]

-------------------
lalr_state [78]: {
  [LetExp ::= LET DecList IN ExpList END (*) , {EOF error ID STRING INT SEMICOLON LPAREN RPAREN RBRACK WHILE TO DO LET IN END BREAK NIL FUNCTION TYPE }]
}

-------------------
lalr_state [79]: {
  [ExpList ::= Exp ExpList (*) , {RPAREN END }]
}

-------------------
lalr_state [80]: {
  [$START ::= Exp EOF (*) , {EOF }]
}

-------------------
lalr_state [81]: {
  [ForExp ::= ID FOR (*) ASSIGN Exp TO Exp DO Exp , {EOF error ID STRING INT SEMICOLON LPAREN RPAREN RBRACK WHILE TO DO LET IN END BREAK NIL FUNCTION TYPE }]
}
transition on ASSIGN to state [87]

-------------------
lalr_state [82]: {
  [Exp ::= (*) NIL , {RBRACK }]
  [Exp ::= (*) SeqExp , {RBRACK }]
  [WhileExp ::= (*) WHILE Exp DO Exp , {RBRACK }]
  [Var ::= (*) SubscriptVar , {RBRACK DOT ASSIGN }]
  [Exp ::= (*) STRING , {RBRACK }]
  [Exp ::= (*) ArrayExp , {RBRACK }]
  [SeqExp ::= (*) LPAREN Exp SEMICOLON ExpList RPAREN , {RBRACK }]
  [Var ::= (*) ID , {RBRACK DOT ASSIGN }]
  [SubscriptVar ::= (*) FieldVar LBRACK Exp RBRACK , {LBRACK RBRACK DOT ASSIGN }]
  [Exp ::= (*) error , {RBRACK }]
  [Exp ::= (*) BREAK , {RBRACK }]
  [ArrayExp ::= ID LBRACK (*) Exp RBRACK OF Exp , {EOF error ID STRING INT SEMICOLON LPAREN RPAREN RBRACK WHILE TO DO LET IN END BREAK NIL FUNCTION TYPE }]
  [Exp ::= (*) ForExp , {RBRACK }]
  [ArrayExp ::= (*) ID LBRACK Exp RBRACK OF Exp , {RBRACK }]
  [LetExp ::= (*) LET DecList IN ExpList END , {RBRACK }]
  [FieldVar ::= (*) Var DOT ID , {LBRACK RBRACK DOT ASSIGN }]
  [Exp ::= (*) INT , {RBRACK }]
  [Exp ::= (*) AssignExp , {RBRACK }]
  [ForExp ::= (*) ID FOR ASSIGN Exp TO Exp DO Exp , {RBRACK }]
  [Var ::= (*) FieldVar , {RBRACK DOT ASSIGN }]
  [SubscriptVar ::= (*) SubscriptVar LBRACK Exp RBRACK , {LBRACK RBRACK DOT ASSIGN }]
  [Exp ::= (*) Var , {RBRACK }]
  [Exp ::= (*) LetExp , {RBRACK }]
  [Exp ::= (*) WhileExp , {RBRACK }]
  [AssignExp ::= (*) Var ASSIGN Exp , {RBRACK }]
  [SubscriptVar ::= ID LBRACK (*) Exp RBRACK , {EOF error ID STRING INT SEMICOLON LPAREN RPAREN LBRACK RBRACK DOT ASSIGN WHILE TO DO LET IN END BREAK NIL FUNCTION TYPE }]
  [SubscriptVar ::= (*) ID LBRACK Exp RBRACK , {LBRACK RBRACK DOT ASSIGN }]
}
transition on SeqExp to state [19]
transition on LET to state [18]
transition on error to state [17]
transition on AssignExp to state [16]
transition on Exp to state [83]
transition on BREAK to state [15]
transition on STRING to state [13]
transition on ID to state [12]
transition on NIL to state [11]
transition on LPAREN to state [9]
transition on LetExp to state [10]
transition on WhileExp to state [8]
transition on FieldVar to state [7]
transition on WHILE to state [6]
transition on Var to state [5]
transition on INT to state [4]
transition on SubscriptVar to state [3]
transition on ArrayExp to state [2]
transition on ForExp to state [1]

-------------------
lalr_state [83]: {
  [SubscriptVar ::= ID LBRACK Exp (*) RBRACK , {EOF error ID STRING INT SEMICOLON LPAREN RPAREN LBRACK RBRACK DOT ASSIGN WHILE TO DO LET IN END BREAK NIL FUNCTION TYPE }]
  [ArrayExp ::= ID LBRACK Exp (*) RBRACK OF Exp , {EOF error ID STRING INT SEMICOLON LPAREN RPAREN RBRACK WHILE TO DO LET IN END BREAK NIL FUNCTION TYPE }]
}
transition on RBRACK to state [84]

-------------------
lalr_state [84]: {
  [SubscriptVar ::= ID LBRACK Exp RBRACK (*) , {EOF error ID STRING INT SEMICOLON LPAREN RPAREN LBRACK RBRACK DOT ASSIGN WHILE TO DO LET IN END BREAK NIL FUNCTION TYPE }]
  [ArrayExp ::= ID LBRACK Exp RBRACK (*) OF Exp , {EOF error ID STRING INT SEMICOLON LPAREN RPAREN RBRACK WHILE TO DO LET IN END BREAK NIL FUNCTION TYPE }]
}
transition on OF to state [85]

-------------------
lalr_state [85]: {
  [Exp ::= (*) NIL , {EOF error ID STRING INT SEMICOLON LPAREN RPAREN RBRACK WHILE TO DO LET IN END BREAK NIL FUNCTION TYPE }]
  [Exp ::= (*) SeqExp , {EOF error ID STRING INT SEMICOLON LPAREN RPAREN RBRACK WHILE TO DO LET IN END BREAK NIL FUNCTION TYPE }]
  [WhileExp ::= (*) WHILE Exp DO Exp , {EOF error ID STRING INT SEMICOLON LPAREN RPAREN RBRACK WHILE TO DO LET IN END BREAK NIL FUNCTION TYPE }]
  [Var ::= (*) SubscriptVar , {EOF error ID STRING INT SEMICOLON LPAREN RPAREN RBRACK DOT ASSIGN WHILE TO DO LET IN END BREAK NIL FUNCTION TYPE }]
  [Exp ::= (*) STRING , {EOF error ID STRING INT SEMICOLON LPAREN RPAREN RBRACK WHILE TO DO LET IN END BREAK NIL FUNCTION TYPE }]
  [Exp ::= (*) ArrayExp , {EOF error ID STRING INT SEMICOLON LPAREN RPAREN RBRACK WHILE TO DO LET IN END BREAK NIL FUNCTION TYPE }]
  [SeqExp ::= (*) LPAREN Exp SEMICOLON ExpList RPAREN , {EOF error ID STRING INT SEMICOLON LPAREN RPAREN RBRACK WHILE TO DO LET IN END BREAK NIL FUNCTION TYPE }]
  [ArrayExp ::= ID LBRACK Exp RBRACK OF (*) Exp , {EOF error ID STRING INT SEMICOLON LPAREN RPAREN RBRACK WHILE TO DO LET IN END BREAK NIL FUNCTION TYPE }]
  [Var ::= (*) ID , {EOF error ID STRING INT SEMICOLON LPAREN RPAREN RBRACK DOT ASSIGN WHILE TO DO LET IN END BREAK NIL FUNCTION TYPE }]
  [SubscriptVar ::= (*) FieldVar LBRACK Exp RBRACK , {EOF error ID STRING INT SEMICOLON LPAREN RPAREN LBRACK RBRACK DOT ASSIGN WHILE TO DO LET IN END BREAK NIL FUNCTION TYPE }]
  [Exp ::= (*) error , {EOF error ID STRING INT SEMICOLON LPAREN RPAREN RBRACK WHILE TO DO LET IN END BREAK NIL FUNCTION TYPE }]
  [Exp ::= (*) BREAK , {EOF error ID STRING INT SEMICOLON LPAREN RPAREN RBRACK WHILE TO DO LET IN END BREAK NIL FUNCTION TYPE }]
  [Exp ::= (*) ForExp , {EOF error ID STRING INT SEMICOLON LPAREN RPAREN RBRACK WHILE TO DO LET IN END BREAK NIL FUNCTION TYPE }]
  [ArrayExp ::= (*) ID LBRACK Exp RBRACK OF Exp , {EOF error ID STRING INT SEMICOLON LPAREN RPAREN RBRACK WHILE TO DO LET IN END BREAK NIL FUNCTION TYPE }]
  [LetExp ::= (*) LET DecList IN ExpList END , {EOF error ID STRING INT SEMICOLON LPAREN RPAREN RBRACK WHILE TO DO LET IN END BREAK NIL FUNCTION TYPE }]
  [FieldVar ::= (*) Var DOT ID , {EOF error ID STRING INT SEMICOLON LPAREN RPAREN LBRACK RBRACK DOT ASSIGN WHILE TO DO LET IN END BREAK NIL FUNCTION TYPE }]
  [Exp ::= (*) INT , {EOF error ID STRING INT SEMICOLON LPAREN RPAREN RBRACK WHILE TO DO LET IN END BREAK NIL FUNCTION TYPE }]
  [Exp ::= (*) AssignExp , {EOF error ID STRING INT SEMICOLON LPAREN RPAREN RBRACK WHILE TO DO LET IN END BREAK NIL FUNCTION TYPE }]
  [ForExp ::= (*) ID FOR ASSIGN Exp TO Exp DO Exp , {EOF error ID STRING INT SEMICOLON LPAREN RPAREN RBRACK WHILE TO DO LET IN END BREAK NIL FUNCTION TYPE }]
  [Var ::= (*) FieldVar , {EOF error ID STRING INT SEMICOLON LPAREN RPAREN RBRACK DOT ASSIGN WHILE TO DO LET IN END BREAK NIL FUNCTION TYPE }]
  [SubscriptVar ::= (*) SubscriptVar LBRACK Exp RBRACK , {EOF error ID STRING INT SEMICOLON LPAREN RPAREN LBRACK RBRACK DOT ASSIGN WHILE TO DO LET IN END BREAK NIL FUNCTION TYPE }]
  [Exp ::= (*) Var , {EOF error ID STRING INT SEMICOLON LPAREN RPAREN RBRACK WHILE TO DO LET IN END BREAK NIL FUNCTION TYPE }]
  [Exp ::= (*) LetExp , {EOF error ID STRING INT SEMICOLON LPAREN RPAREN RBRACK WHILE TO DO LET IN END BREAK NIL FUNCTION TYPE }]
  [Exp ::= (*) WhileExp , {EOF error ID STRING INT SEMICOLON LPAREN RPAREN RBRACK WHILE TO DO LET IN END BREAK NIL FUNCTION TYPE }]
  [AssignExp ::= (*) Var ASSIGN Exp , {EOF error ID STRING INT SEMICOLON LPAREN RPAREN RBRACK WHILE TO DO LET IN END BREAK NIL FUNCTION TYPE }]
  [SubscriptVar ::= (*) ID LBRACK Exp RBRACK , {EOF error ID STRING INT SEMICOLON LPAREN RPAREN LBRACK RBRACK DOT ASSIGN WHILE TO DO LET IN END BREAK NIL FUNCTION TYPE }]
}
transition on SeqExp to state [19]
transition on LET to state [18]
transition on error to state [17]
transition on AssignExp to state [16]
transition on Exp to state [86]
transition on BREAK to state [15]
transition on STRING to state [13]
transition on ID to state [12]
transition on NIL to state [11]
transition on LPAREN to state [9]
transition on LetExp to state [10]
transition on WhileExp to state [8]
transition on FieldVar to state [7]
transition on WHILE to state [6]
transition on Var to state [5]
transition on INT to state [4]
transition on SubscriptVar to state [3]
transition on ArrayExp to state [2]
transition on ForExp to state [1]

-------------------
lalr_state [86]: {
  [ArrayExp ::= ID LBRACK Exp RBRACK OF Exp (*) , {EOF error ID STRING INT SEMICOLON LPAREN RPAREN RBRACK WHILE TO DO LET IN END BREAK NIL FUNCTION TYPE }]
}

-------------------
lalr_state [87]: {
  [Exp ::= (*) NIL , {TO }]
  [Exp ::= (*) SeqExp , {TO }]
  [WhileExp ::= (*) WHILE Exp DO Exp , {TO }]
  [Var ::= (*) SubscriptVar , {DOT ASSIGN TO }]
  [Exp ::= (*) STRING , {TO }]
  [Exp ::= (*) ArrayExp , {TO }]
  [SeqExp ::= (*) LPAREN Exp SEMICOLON ExpList RPAREN , {TO }]
  [Var ::= (*) ID , {DOT ASSIGN TO }]
  [SubscriptVar ::= (*) FieldVar LBRACK Exp RBRACK , {LBRACK DOT ASSIGN TO }]
  [Exp ::= (*) error , {TO }]
  [Exp ::= (*) BREAK , {TO }]
  [Exp ::= (*) ForExp , {TO }]
  [ArrayExp ::= (*) ID LBRACK Exp RBRACK OF Exp , {TO }]
  [LetExp ::= (*) LET DecList IN ExpList END , {TO }]
  [FieldVar ::= (*) Var DOT ID , {LBRACK DOT ASSIGN TO }]
  [Exp ::= (*) INT , {TO }]
  [ForExp ::= ID FOR ASSIGN (*) Exp TO Exp DO Exp , {EOF error ID STRING INT SEMICOLON LPAREN RPAREN RBRACK WHILE TO DO LET IN END BREAK NIL FUNCTION TYPE }]
  [Exp ::= (*) AssignExp , {TO }]
  [ForExp ::= (*) ID FOR ASSIGN Exp TO Exp DO Exp , {TO }]
  [Var ::= (*) FieldVar , {DOT ASSIGN TO }]
  [SubscriptVar ::= (*) SubscriptVar LBRACK Exp RBRACK , {LBRACK DOT ASSIGN TO }]
  [Exp ::= (*) Var , {TO }]
  [Exp ::= (*) LetExp , {TO }]
  [Exp ::= (*) WhileExp , {TO }]
  [AssignExp ::= (*) Var ASSIGN Exp , {TO }]
  [SubscriptVar ::= (*) ID LBRACK Exp RBRACK , {LBRACK DOT ASSIGN TO }]
}
transition on SeqExp to state [19]
transition on LET to state [18]
transition on error to state [17]
transition on AssignExp to state [16]
transition on Exp to state [88]
transition on BREAK to state [15]
transition on STRING to state [13]
transition on ID to state [12]
transition on NIL to state [11]
transition on LPAREN to state [9]
transition on LetExp to state [10]
transition on WhileExp to state [8]
transition on FieldVar to state [7]
transition on WHILE to state [6]
transition on Var to state [5]
transition on INT to state [4]
transition on SubscriptVar to state [3]
transition on ArrayExp to state [2]
transition on ForExp to state [1]

-------------------
lalr_state [88]: {
  [ForExp ::= ID FOR ASSIGN Exp (*) TO Exp DO Exp , {EOF error ID STRING INT SEMICOLON LPAREN RPAREN RBRACK WHILE TO DO LET IN END BREAK NIL FUNCTION TYPE }]
}
transition on TO to state [89]

-------------------
lalr_state [89]: {
  [Exp ::= (*) NIL , {DO }]
  [Exp ::= (*) SeqExp , {DO }]
  [WhileExp ::= (*) WHILE Exp DO Exp , {DO }]
  [Var ::= (*) SubscriptVar , {DOT ASSIGN DO }]
  [Exp ::= (*) STRING , {DO }]
  [Exp ::= (*) ArrayExp , {DO }]
  [SeqExp ::= (*) LPAREN Exp SEMICOLON ExpList RPAREN , {DO }]
  [Var ::= (*) ID , {DOT ASSIGN DO }]
  [SubscriptVar ::= (*) FieldVar LBRACK Exp RBRACK , {LBRACK DOT ASSIGN DO }]
  [Exp ::= (*) error , {DO }]
  [Exp ::= (*) BREAK , {DO }]
  [Exp ::= (*) ForExp , {DO }]
  [ArrayExp ::= (*) ID LBRACK Exp RBRACK OF Exp , {DO }]
  [LetExp ::= (*) LET DecList IN ExpList END , {DO }]
  [ForExp ::= ID FOR ASSIGN Exp TO (*) Exp DO Exp , {EOF error ID STRING INT SEMICOLON LPAREN RPAREN RBRACK WHILE TO DO LET IN END BREAK NIL FUNCTION TYPE }]
  [FieldVar ::= (*) Var DOT ID , {LBRACK DOT ASSIGN DO }]
  [Exp ::= (*) INT , {DO }]
  [Exp ::= (*) AssignExp , {DO }]
  [ForExp ::= (*) ID FOR ASSIGN Exp TO Exp DO Exp , {DO }]
  [Var ::= (*) FieldVar , {DOT ASSIGN DO }]
  [SubscriptVar ::= (*) SubscriptVar LBRACK Exp RBRACK , {LBRACK DOT ASSIGN DO }]
  [Exp ::= (*) Var , {DO }]
  [Exp ::= (*) LetExp , {DO }]
  [Exp ::= (*) WhileExp , {DO }]
  [AssignExp ::= (*) Var ASSIGN Exp , {DO }]
  [SubscriptVar ::= (*) ID LBRACK Exp RBRACK , {LBRACK DOT ASSIGN DO }]
}
transition on SeqExp to state [19]
transition on LET to state [18]
transition on error to state [17]
transition on AssignExp to state [16]
transition on Exp to state [90]
transition on BREAK to state [15]
transition on STRING to state [13]
transition on ID to state [12]
transition on NIL to state [11]
transition on LPAREN to state [9]
transition on LetExp to state [10]
transition on WhileExp to state [8]
transition on FieldVar to state [7]
transition on WHILE to state [6]
transition on Var to state [5]
transition on INT to state [4]
transition on SubscriptVar to state [3]
transition on ArrayExp to state [2]
transition on ForExp to state [1]

-------------------
lalr_state [90]: {
  [ForExp ::= ID FOR ASSIGN Exp TO Exp (*) DO Exp , {EOF error ID STRING INT SEMICOLON LPAREN RPAREN RBRACK WHILE TO DO LET IN END BREAK NIL FUNCTION TYPE }]
}
transition on DO to state [91]

-------------------
lalr_state [91]: {
  [Exp ::= (*) NIL , {EOF error ID STRING INT SEMICOLON LPAREN RPAREN RBRACK WHILE TO DO LET IN END BREAK NIL FUNCTION TYPE }]
  [Exp ::= (*) SeqExp , {EOF error ID STRING INT SEMICOLON LPAREN RPAREN RBRACK WHILE TO DO LET IN END BREAK NIL FUNCTION TYPE }]
  [WhileExp ::= (*) WHILE Exp DO Exp , {EOF error ID STRING INT SEMICOLON LPAREN RPAREN RBRACK WHILE TO DO LET IN END BREAK NIL FUNCTION TYPE }]
  [Var ::= (*) SubscriptVar , {EOF error ID STRING INT SEMICOLON LPAREN RPAREN RBRACK DOT ASSIGN WHILE TO DO LET IN END BREAK NIL FUNCTION TYPE }]
  [Exp ::= (*) STRING , {EOF error ID STRING INT SEMICOLON LPAREN RPAREN RBRACK WHILE TO DO LET IN END BREAK NIL FUNCTION TYPE }]
  [Exp ::= (*) ArrayExp , {EOF error ID STRING INT SEMICOLON LPAREN RPAREN RBRACK WHILE TO DO LET IN END BREAK NIL FUNCTION TYPE }]
  [SeqExp ::= (*) LPAREN Exp SEMICOLON ExpList RPAREN , {EOF error ID STRING INT SEMICOLON LPAREN RPAREN RBRACK WHILE TO DO LET IN END BREAK NIL FUNCTION TYPE }]
  [Var ::= (*) ID , {EOF error ID STRING INT SEMICOLON LPAREN RPAREN RBRACK DOT ASSIGN WHILE TO DO LET IN END BREAK NIL FUNCTION TYPE }]
  [SubscriptVar ::= (*) FieldVar LBRACK Exp RBRACK , {EOF error ID STRING INT SEMICOLON LPAREN RPAREN LBRACK RBRACK DOT ASSIGN WHILE TO DO LET IN END BREAK NIL FUNCTION TYPE }]
  [Exp ::= (*) error , {EOF error ID STRING INT SEMICOLON LPAREN RPAREN RBRACK WHILE TO DO LET IN END BREAK NIL FUNCTION TYPE }]
  [Exp ::= (*) BREAK , {EOF error ID STRING INT SEMICOLON LPAREN RPAREN RBRACK WHILE TO DO LET IN END BREAK NIL FUNCTION TYPE }]
  [Exp ::= (*) ForExp , {EOF error ID STRING INT SEMICOLON LPAREN RPAREN RBRACK WHILE TO DO LET IN END BREAK NIL FUNCTION TYPE }]
  [ArrayExp ::= (*) ID LBRACK Exp RBRACK OF Exp , {EOF error ID STRING INT SEMICOLON LPAREN RPAREN RBRACK WHILE TO DO LET IN END BREAK NIL FUNCTION TYPE }]
  [LetExp ::= (*) LET DecList IN ExpList END , {EOF error ID STRING INT SEMICOLON LPAREN RPAREN RBRACK WHILE TO DO LET IN END BREAK NIL FUNCTION TYPE }]
  [ForExp ::= ID FOR ASSIGN Exp TO Exp DO (*) Exp , {EOF error ID STRING INT SEMICOLON LPAREN RPAREN RBRACK WHILE TO DO LET IN END BREAK NIL FUNCTION TYPE }]
  [FieldVar ::= (*) Var DOT ID , {EOF error ID STRING INT SEMICOLON LPAREN RPAREN LBRACK RBRACK DOT ASSIGN WHILE TO DO LET IN END BREAK NIL FUNCTION TYPE }]
  [Exp ::= (*) INT , {EOF error ID STRING INT SEMICOLON LPAREN RPAREN RBRACK WHILE TO DO LET IN END BREAK NIL FUNCTION TYPE }]
  [Exp ::= (*) AssignExp , {EOF error ID STRING INT SEMICOLON LPAREN RPAREN RBRACK WHILE TO DO LET IN END BREAK NIL FUNCTION TYPE }]
  [ForExp ::= (*) ID FOR ASSIGN Exp TO Exp DO Exp , {EOF error ID STRING INT SEMICOLON LPAREN RPAREN RBRACK WHILE TO DO LET IN END BREAK NIL FUNCTION TYPE }]
  [Var ::= (*) FieldVar , {EOF error ID STRING INT SEMICOLON LPAREN RPAREN RBRACK DOT ASSIGN WHILE TO DO LET IN END BREAK NIL FUNCTION TYPE }]
  [SubscriptVar ::= (*) SubscriptVar LBRACK Exp RBRACK , {EOF error ID STRING INT SEMICOLON LPAREN RPAREN LBRACK RBRACK DOT ASSIGN WHILE TO DO LET IN END BREAK NIL FUNCTION TYPE }]
  [Exp ::= (*) Var , {EOF error ID STRING INT SEMICOLON LPAREN RPAREN RBRACK WHILE TO DO LET IN END BREAK NIL FUNCTION TYPE }]
  [Exp ::= (*) LetExp , {EOF error ID STRING INT SEMICOLON LPAREN RPAREN RBRACK WHILE TO DO LET IN END BREAK NIL FUNCTION TYPE }]
  [Exp ::= (*) WhileExp , {EOF error ID STRING INT SEMICOLON LPAREN RPAREN RBRACK WHILE TO DO LET IN END BREAK NIL FUNCTION TYPE }]
  [AssignExp ::= (*) Var ASSIGN Exp , {EOF error ID STRING INT SEMICOLON LPAREN RPAREN RBRACK WHILE TO DO LET IN END BREAK NIL FUNCTION TYPE }]
  [SubscriptVar ::= (*) ID LBRACK Exp RBRACK , {EOF error ID STRING INT SEMICOLON LPAREN RPAREN LBRACK RBRACK DOT ASSIGN WHILE TO DO LET IN END BREAK NIL FUNCTION TYPE }]
}
transition on SeqExp to state [19]
transition on LET to state [18]
transition on error to state [17]
transition on AssignExp to state [16]
transition on Exp to state [92]
transition on BREAK to state [15]
transition on STRING to state [13]
transition on ID to state [12]
transition on NIL to state [11]
transition on LPAREN to state [9]
transition on LetExp to state [10]
transition on WhileExp to state [8]
transition on FieldVar to state [7]
transition on WHILE to state [6]
transition on Var to state [5]
transition on INT to state [4]
transition on SubscriptVar to state [3]
transition on ArrayExp to state [2]
transition on ForExp to state [1]

-------------------
lalr_state [92]: {
  [ForExp ::= ID FOR ASSIGN Exp TO Exp DO Exp (*) , {EOF error ID STRING INT SEMICOLON LPAREN RPAREN RBRACK WHILE TO DO LET IN END BREAK NIL FUNCTION TYPE }]
}

-------------------
lalr_state [93]: {
  [SeqExp ::= LPAREN Exp (*) SEMICOLON ExpList RPAREN , {EOF error ID STRING INT SEMICOLON LPAREN RPAREN RBRACK WHILE TO DO LET IN END BREAK NIL FUNCTION TYPE }]
}
transition on SEMICOLON to state [94]

-------------------
lalr_state [94]: {
  [Exp ::= (*) NIL , {error ID STRING INT LPAREN RPAREN WHILE LET BREAK NIL }]
  [Exp ::= (*) SeqExp , {error ID STRING INT LPAREN RPAREN WHILE LET BREAK NIL }]
  [ExpList ::= (*) Exp ExpList , {RPAREN }]
  [WhileExp ::= (*) WHILE Exp DO Exp , {error ID STRING INT LPAREN RPAREN WHILE LET BREAK NIL }]
  [Var ::= (*) SubscriptVar , {error ID STRING INT LPAREN RPAREN DOT ASSIGN WHILE LET BREAK NIL }]
  [Exp ::= (*) STRING , {error ID STRING INT LPAREN RPAREN WHILE LET BREAK NIL }]
  [SeqExp ::= LPAREN Exp SEMICOLON (*) ExpList RPAREN , {EOF error ID STRING INT SEMICOLON LPAREN RPAREN RBRACK WHILE TO DO LET IN END BREAK NIL FUNCTION TYPE }]
  [Exp ::= (*) ArrayExp , {error ID STRING INT LPAREN RPAREN WHILE LET BREAK NIL }]
  [ExpList ::= (*) , {RPAREN }]
  [SeqExp ::= (*) LPAREN Exp SEMICOLON ExpList RPAREN , {error ID STRING INT LPAREN RPAREN WHILE LET BREAK NIL }]
  [Var ::= (*) ID , {error ID STRING INT LPAREN RPAREN DOT ASSIGN WHILE LET BREAK NIL }]
  [SubscriptVar ::= (*) FieldVar LBRACK Exp RBRACK , {error ID STRING INT LPAREN RPAREN LBRACK DOT ASSIGN WHILE LET BREAK NIL }]
  [Exp ::= (*) error , {error ID STRING INT LPAREN RPAREN WHILE LET BREAK NIL }]
  [Exp ::= (*) BREAK , {error ID STRING INT LPAREN RPAREN WHILE LET BREAK NIL }]
  [Exp ::= (*) ForExp , {error ID STRING INT LPAREN RPAREN WHILE LET BREAK NIL }]
  [ArrayExp ::= (*) ID LBRACK Exp RBRACK OF Exp , {error ID STRING INT LPAREN RPAREN WHILE LET BREAK NIL }]
  [LetExp ::= (*) LET DecList IN ExpList END , {error ID STRING INT LPAREN RPAREN WHILE LET BREAK NIL }]
  [FieldVar ::= (*) Var DOT ID , {error ID STRING INT LPAREN RPAREN LBRACK DOT ASSIGN WHILE LET BREAK NIL }]
  [Exp ::= (*) INT , {error ID STRING INT LPAREN RPAREN WHILE LET BREAK NIL }]
  [Exp ::= (*) AssignExp , {error ID STRING INT LPAREN RPAREN WHILE LET BREAK NIL }]
  [ExpList ::= (*) Exp , {RPAREN }]
  [ForExp ::= (*) ID FOR ASSIGN Exp TO Exp DO Exp , {error ID STRING INT LPAREN RPAREN WHILE LET BREAK NIL }]
  [Var ::= (*) FieldVar , {error ID STRING INT LPAREN RPAREN DOT ASSIGN WHILE LET BREAK NIL }]
  [SubscriptVar ::= (*) SubscriptVar LBRACK Exp RBRACK , {error ID STRING INT LPAREN RPAREN LBRACK DOT ASSIGN WHILE LET BREAK NIL }]
  [Exp ::= (*) Var , {error ID STRING INT LPAREN RPAREN WHILE LET BREAK NIL }]
  [Exp ::= (*) LetExp , {error ID STRING INT LPAREN RPAREN WHILE LET BREAK NIL }]
  [Exp ::= (*) WhileExp , {error ID STRING INT LPAREN RPAREN WHILE LET BREAK NIL }]
  [AssignExp ::= (*) Var ASSIGN Exp , {error ID STRING INT LPAREN RPAREN WHILE LET BREAK NIL }]
  [SubscriptVar ::= (*) ID LBRACK Exp RBRACK , {error ID STRING INT LPAREN RPAREN LBRACK DOT ASSIGN WHILE LET BREAK NIL }]
}
transition on ExpList to state [95]
transition on SeqExp to state [19]
transition on LET to state [18]
transition on error to state [17]
transition on AssignExp to state [16]
transition on Exp to state [76]
transition on BREAK to state [15]
transition on STRING to state [13]
transition on ID to state [12]
transition on NIL to state [11]
transition on LPAREN to state [9]
transition on LetExp to state [10]
transition on WhileExp to state [8]
transition on FieldVar to state [7]
transition on WHILE to state [6]
transition on Var to state [5]
transition on INT to state [4]
transition on SubscriptVar to state [3]
transition on ArrayExp to state [2]
transition on ForExp to state [1]

-------------------
lalr_state [95]: {
  [SeqExp ::= LPAREN Exp SEMICOLON ExpList (*) RPAREN , {EOF error ID STRING INT SEMICOLON LPAREN RPAREN RBRACK WHILE TO DO LET IN END BREAK NIL FUNCTION TYPE }]
}
transition on RPAREN to state [96]

-------------------
lalr_state [96]: {
  [SeqExp ::= LPAREN Exp SEMICOLON ExpList RPAREN (*) , {EOF error ID STRING INT SEMICOLON LPAREN RPAREN RBRACK WHILE TO DO LET IN END BREAK NIL FUNCTION TYPE }]
}

-------------------
lalr_state [97]: {
  [Exp ::= (*) NIL , {RBRACK }]
  [Exp ::= (*) SeqExp , {RBRACK }]
  [WhileExp ::= (*) WHILE Exp DO Exp , {RBRACK }]
  [Var ::= (*) SubscriptVar , {RBRACK DOT ASSIGN }]
  [Exp ::= (*) STRING , {RBRACK }]
  [Exp ::= (*) ArrayExp , {RBRACK }]
  [SeqExp ::= (*) LPAREN Exp SEMICOLON ExpList RPAREN , {RBRACK }]
  [SubscriptVar ::= FieldVar LBRACK (*) Exp RBRACK , {EOF error ID STRING INT SEMICOLON LPAREN RPAREN LBRACK RBRACK DOT ASSIGN WHILE TO DO LET IN END BREAK NIL FUNCTION TYPE }]
  [Var ::= (*) ID , {RBRACK DOT ASSIGN }]
  [SubscriptVar ::= (*) FieldVar LBRACK Exp RBRACK , {LBRACK RBRACK DOT ASSIGN }]
  [Exp ::= (*) error , {RBRACK }]
  [Exp ::= (*) BREAK , {RBRACK }]
  [Exp ::= (*) ForExp , {RBRACK }]
  [ArrayExp ::= (*) ID LBRACK Exp RBRACK OF Exp , {RBRACK }]
  [LetExp ::= (*) LET DecList IN ExpList END , {RBRACK }]
  [FieldVar ::= (*) Var DOT ID , {LBRACK RBRACK DOT ASSIGN }]
  [Exp ::= (*) INT , {RBRACK }]
  [Exp ::= (*) AssignExp , {RBRACK }]
  [ForExp ::= (*) ID FOR ASSIGN Exp TO Exp DO Exp , {RBRACK }]
  [Var ::= (*) FieldVar , {RBRACK DOT ASSIGN }]
  [SubscriptVar ::= (*) SubscriptVar LBRACK Exp RBRACK , {LBRACK RBRACK DOT ASSIGN }]
  [Exp ::= (*) Var , {RBRACK }]
  [Exp ::= (*) LetExp , {RBRACK }]
  [Exp ::= (*) WhileExp , {RBRACK }]
  [AssignExp ::= (*) Var ASSIGN Exp , {RBRACK }]
  [SubscriptVar ::= (*) ID LBRACK Exp RBRACK , {LBRACK RBRACK DOT ASSIGN }]
}
transition on SeqExp to state [19]
transition on LET to state [18]
transition on error to state [17]
transition on AssignExp to state [16]
transition on Exp to state [98]
transition on BREAK to state [15]
transition on STRING to state [13]
transition on ID to state [12]
transition on NIL to state [11]
transition on LPAREN to state [9]
transition on LetExp to state [10]
transition on WhileExp to state [8]
transition on FieldVar to state [7]
transition on WHILE to state [6]
transition on Var to state [5]
transition on INT to state [4]
transition on SubscriptVar to state [3]
transition on ArrayExp to state [2]
transition on ForExp to state [1]

-------------------
lalr_state [98]: {
  [SubscriptVar ::= FieldVar LBRACK Exp (*) RBRACK , {EOF error ID STRING INT SEMICOLON LPAREN RPAREN LBRACK RBRACK DOT ASSIGN WHILE TO DO LET IN END BREAK NIL FUNCTION TYPE }]
}
transition on RBRACK to state [99]

-------------------
lalr_state [99]: {
  [SubscriptVar ::= FieldVar LBRACK Exp RBRACK (*) , {EOF error ID STRING INT SEMICOLON LPAREN RPAREN LBRACK RBRACK DOT ASSIGN WHILE TO DO LET IN END BREAK NIL FUNCTION TYPE }]
}

-------------------
lalr_state [100]: {
  [WhileExp ::= WHILE Exp (*) DO Exp , {EOF error ID STRING INT SEMICOLON LPAREN RPAREN RBRACK WHILE TO DO LET IN END BREAK NIL FUNCTION TYPE }]
}
transition on DO to state [101]

-------------------
lalr_state [101]: {
  [WhileExp ::= WHILE Exp DO (*) Exp , {EOF error ID STRING INT SEMICOLON LPAREN RPAREN RBRACK WHILE TO DO LET IN END BREAK NIL FUNCTION TYPE }]
  [Exp ::= (*) NIL , {EOF error ID STRING INT SEMICOLON LPAREN RPAREN RBRACK WHILE TO DO LET IN END BREAK NIL FUNCTION TYPE }]
  [Exp ::= (*) SeqExp , {EOF error ID STRING INT SEMICOLON LPAREN RPAREN RBRACK WHILE TO DO LET IN END BREAK NIL FUNCTION TYPE }]
  [WhileExp ::= (*) WHILE Exp DO Exp , {EOF error ID STRING INT SEMICOLON LPAREN RPAREN RBRACK WHILE TO DO LET IN END BREAK NIL FUNCTION TYPE }]
  [Var ::= (*) SubscriptVar , {EOF error ID STRING INT SEMICOLON LPAREN RPAREN RBRACK DOT ASSIGN WHILE TO DO LET IN END BREAK NIL FUNCTION TYPE }]
  [Exp ::= (*) STRING , {EOF error ID STRING INT SEMICOLON LPAREN RPAREN RBRACK WHILE TO DO LET IN END BREAK NIL FUNCTION TYPE }]
  [Exp ::= (*) ArrayExp , {EOF error ID STRING INT SEMICOLON LPAREN RPAREN RBRACK WHILE TO DO LET IN END BREAK NIL FUNCTION TYPE }]
  [SeqExp ::= (*) LPAREN Exp SEMICOLON ExpList RPAREN , {EOF error ID STRING INT SEMICOLON LPAREN RPAREN RBRACK WHILE TO DO LET IN END BREAK NIL FUNCTION TYPE }]
  [Var ::= (*) ID , {EOF error ID STRING INT SEMICOLON LPAREN RPAREN RBRACK DOT ASSIGN WHILE TO DO LET IN END BREAK NIL FUNCTION TYPE }]
  [SubscriptVar ::= (*) FieldVar LBRACK Exp RBRACK , {EOF error ID STRING INT SEMICOLON LPAREN RPAREN LBRACK RBRACK DOT ASSIGN WHILE TO DO LET IN END BREAK NIL FUNCTION TYPE }]
  [Exp ::= (*) error , {EOF error ID STRING INT SEMICOLON LPAREN RPAREN RBRACK WHILE TO DO LET IN END BREAK NIL FUNCTION TYPE }]
  [Exp ::= (*) BREAK , {EOF error ID STRING INT SEMICOLON LPAREN RPAREN RBRACK WHILE TO DO LET IN END BREAK NIL FUNCTION TYPE }]
  [Exp ::= (*) ForExp , {EOF error ID STRING INT SEMICOLON LPAREN RPAREN RBRACK WHILE TO DO LET IN END BREAK NIL FUNCTION TYPE }]
  [ArrayExp ::= (*) ID LBRACK Exp RBRACK OF Exp , {EOF error ID STRING INT SEMICOLON LPAREN RPAREN RBRACK WHILE TO DO LET IN END BREAK NIL FUNCTION TYPE }]
  [LetExp ::= (*) LET DecList IN ExpList END , {EOF error ID STRING INT SEMICOLON LPAREN RPAREN RBRACK WHILE TO DO LET IN END BREAK NIL FUNCTION TYPE }]
  [FieldVar ::= (*) Var DOT ID , {EOF error ID STRING INT SEMICOLON LPAREN RPAREN LBRACK RBRACK DOT ASSIGN WHILE TO DO LET IN END BREAK NIL FUNCTION TYPE }]
  [Exp ::= (*) INT , {EOF error ID STRING INT SEMICOLON LPAREN RPAREN RBRACK WHILE TO DO LET IN END BREAK NIL FUNCTION TYPE }]
  [Exp ::= (*) AssignExp , {EOF error ID STRING INT SEMICOLON LPAREN RPAREN RBRACK WHILE TO DO LET IN END BREAK NIL FUNCTION TYPE }]
  [ForExp ::= (*) ID FOR ASSIGN Exp TO Exp DO Exp , {EOF error ID STRING INT SEMICOLON LPAREN RPAREN RBRACK WHILE TO DO LET IN END BREAK NIL FUNCTION TYPE }]
  [Var ::= (*) FieldVar , {EOF error ID STRING INT SEMICOLON LPAREN RPAREN RBRACK DOT ASSIGN WHILE TO DO LET IN END BREAK NIL FUNCTION TYPE }]
  [SubscriptVar ::= (*) SubscriptVar LBRACK Exp RBRACK , {EOF error ID STRING INT SEMICOLON LPAREN RPAREN LBRACK RBRACK DOT ASSIGN WHILE TO DO LET IN END BREAK NIL FUNCTION TYPE }]
  [Exp ::= (*) Var , {EOF error ID STRING INT SEMICOLON LPAREN RPAREN RBRACK WHILE TO DO LET IN END BREAK NIL FUNCTION TYPE }]
  [Exp ::= (*) LetExp , {EOF error ID STRING INT SEMICOLON LPAREN RPAREN RBRACK WHILE TO DO LET IN END BREAK NIL FUNCTION TYPE }]
  [Exp ::= (*) WhileExp , {EOF error ID STRING INT SEMICOLON LPAREN RPAREN RBRACK WHILE TO DO LET IN END BREAK NIL FUNCTION TYPE }]
  [AssignExp ::= (*) Var ASSIGN Exp , {EOF error ID STRING INT SEMICOLON LPAREN RPAREN RBRACK WHILE TO DO LET IN END BREAK NIL FUNCTION TYPE }]
  [SubscriptVar ::= (*) ID LBRACK Exp RBRACK , {EOF error ID STRING INT SEMICOLON LPAREN RPAREN LBRACK RBRACK DOT ASSIGN WHILE TO DO LET IN END BREAK NIL FUNCTION TYPE }]
}
transition on SeqExp to state [19]
transition on LET to state [18]
transition on error to state [17]
transition on AssignExp to state [16]
transition on Exp to state [102]
transition on BREAK to state [15]
transition on STRING to state [13]
transition on ID to state [12]
transition on NIL to state [11]
transition on LPAREN to state [9]
transition on LetExp to state [10]
transition on WhileExp to state [8]
transition on FieldVar to state [7]
transition on WHILE to state [6]
transition on Var to state [5]
transition on INT to state [4]
transition on SubscriptVar to state [3]
transition on ArrayExp to state [2]
transition on ForExp to state [1]

-------------------
lalr_state [102]: {
  [WhileExp ::= WHILE Exp DO Exp (*) , {EOF error ID STRING INT SEMICOLON LPAREN RPAREN RBRACK WHILE TO DO LET IN END BREAK NIL FUNCTION TYPE }]
}

-------------------
lalr_state [103]: {
  [Exp ::= (*) NIL , {EOF error ID STRING INT SEMICOLON LPAREN RPAREN RBRACK WHILE TO DO LET IN END BREAK NIL FUNCTION TYPE }]
  [Exp ::= (*) SeqExp , {EOF error ID STRING INT SEMICOLON LPAREN RPAREN RBRACK WHILE TO DO LET IN END BREAK NIL FUNCTION TYPE }]
  [WhileExp ::= (*) WHILE Exp DO Exp , {EOF error ID STRING INT SEMICOLON LPAREN RPAREN RBRACK WHILE TO DO LET IN END BREAK NIL FUNCTION TYPE }]
  [Var ::= (*) SubscriptVar , {EOF error ID STRING INT SEMICOLON LPAREN RPAREN RBRACK DOT ASSIGN WHILE TO DO LET IN END BREAK NIL FUNCTION TYPE }]
  [Exp ::= (*) STRING , {EOF error ID STRING INT SEMICOLON LPAREN RPAREN RBRACK WHILE TO DO LET IN END BREAK NIL FUNCTION TYPE }]
  [Exp ::= (*) ArrayExp , {EOF error ID STRING INT SEMICOLON LPAREN RPAREN RBRACK WHILE TO DO LET IN END BREAK NIL FUNCTION TYPE }]
  [SeqExp ::= (*) LPAREN Exp SEMICOLON ExpList RPAREN , {EOF error ID STRING INT SEMICOLON LPAREN RPAREN RBRACK WHILE TO DO LET IN END BREAK NIL FUNCTION TYPE }]
  [Var ::= (*) ID , {EOF error ID STRING INT SEMICOLON LPAREN RPAREN RBRACK DOT ASSIGN WHILE TO DO LET IN END BREAK NIL FUNCTION TYPE }]
  [SubscriptVar ::= (*) FieldVar LBRACK Exp RBRACK , {EOF error ID STRING INT SEMICOLON LPAREN RPAREN LBRACK RBRACK DOT ASSIGN WHILE TO DO LET IN END BREAK NIL FUNCTION TYPE }]
  [Exp ::= (*) error , {EOF error ID STRING INT SEMICOLON LPAREN RPAREN RBRACK WHILE TO DO LET IN END BREAK NIL FUNCTION TYPE }]
  [Exp ::= (*) BREAK , {EOF error ID STRING INT SEMICOLON LPAREN RPAREN RBRACK WHILE TO DO LET IN END BREAK NIL FUNCTION TYPE }]
  [Exp ::= (*) ForExp , {EOF error ID STRING INT SEMICOLON LPAREN RPAREN RBRACK WHILE TO DO LET IN END BREAK NIL FUNCTION TYPE }]
  [ArrayExp ::= (*) ID LBRACK Exp RBRACK OF Exp , {EOF error ID STRING INT SEMICOLON LPAREN RPAREN RBRACK WHILE TO DO LET IN END BREAK NIL FUNCTION TYPE }]
  [LetExp ::= (*) LET DecList IN ExpList END , {EOF error ID STRING INT SEMICOLON LPAREN RPAREN RBRACK WHILE TO DO LET IN END BREAK NIL FUNCTION TYPE }]
  [FieldVar ::= (*) Var DOT ID , {EOF error ID STRING INT SEMICOLON LPAREN RPAREN LBRACK RBRACK DOT ASSIGN WHILE TO DO LET IN END BREAK NIL FUNCTION TYPE }]
  [Exp ::= (*) INT , {EOF error ID STRING INT SEMICOLON LPAREN RPAREN RBRACK WHILE TO DO LET IN END BREAK NIL FUNCTION TYPE }]
  [Exp ::= (*) AssignExp , {EOF error ID STRING INT SEMICOLON LPAREN RPAREN RBRACK WHILE TO DO LET IN END BREAK NIL FUNCTION TYPE }]
  [ForExp ::= (*) ID FOR ASSIGN Exp TO Exp DO Exp , {EOF error ID STRING INT SEMICOLON LPAREN RPAREN RBRACK WHILE TO DO LET IN END BREAK NIL FUNCTION TYPE }]
  [Var ::= (*) FieldVar , {EOF error ID STRING INT SEMICOLON LPAREN RPAREN RBRACK DOT ASSIGN WHILE TO DO LET IN END BREAK NIL FUNCTION TYPE }]
  [SubscriptVar ::= (*) SubscriptVar LBRACK Exp RBRACK , {EOF error ID STRING INT SEMICOLON LPAREN RPAREN LBRACK RBRACK DOT ASSIGN WHILE TO DO LET IN END BREAK NIL FUNCTION TYPE }]
  [Exp ::= (*) Var , {EOF error ID STRING INT SEMICOLON LPAREN RPAREN RBRACK WHILE TO DO LET IN END BREAK NIL FUNCTION TYPE }]
  [AssignExp ::= Var ASSIGN (*) Exp , {EOF error ID STRING INT SEMICOLON LPAREN RPAREN RBRACK WHILE TO DO LET IN END BREAK NIL FUNCTION TYPE }]
  [Exp ::= (*) LetExp , {EOF error ID STRING INT SEMICOLON LPAREN RPAREN RBRACK WHILE TO DO LET IN END BREAK NIL FUNCTION TYPE }]
  [Exp ::= (*) WhileExp , {EOF error ID STRING INT SEMICOLON LPAREN RPAREN RBRACK WHILE TO DO LET IN END BREAK NIL FUNCTION TYPE }]
  [AssignExp ::= (*) Var ASSIGN Exp , {EOF error ID STRING INT SEMICOLON LPAREN RPAREN RBRACK WHILE TO DO LET IN END BREAK NIL FUNCTION TYPE }]
  [SubscriptVar ::= (*) ID LBRACK Exp RBRACK , {EOF error ID STRING INT SEMICOLON LPAREN RPAREN LBRACK RBRACK DOT ASSIGN WHILE TO DO LET IN END BREAK NIL FUNCTION TYPE }]
}
transition on SeqExp to state [19]
transition on LET to state [18]
transition on error to state [17]
transition on AssignExp to state [16]
transition on Exp to state [104]
transition on BREAK to state [15]
transition on STRING to state [13]
transition on ID to state [12]
transition on NIL to state [11]
transition on LPAREN to state [9]
transition on LetExp to state [10]
transition on WhileExp to state [8]
transition on FieldVar to state [7]
transition on WHILE to state [6]
transition on Var to state [5]
transition on INT to state [4]
transition on SubscriptVar to state [3]
transition on ArrayExp to state [2]
transition on ForExp to state [1]

-------------------
lalr_state [104]: {
  [AssignExp ::= Var ASSIGN Exp (*) , {EOF error ID STRING INT SEMICOLON LPAREN RPAREN RBRACK WHILE TO DO LET IN END BREAK NIL FUNCTION TYPE }]
}

-------------------
lalr_state [105]: {
  [Exp ::= (*) NIL , {RBRACK }]
  [Exp ::= (*) SeqExp , {RBRACK }]
  [WhileExp ::= (*) WHILE Exp DO Exp , {RBRACK }]
  [Var ::= (*) SubscriptVar , {RBRACK DOT ASSIGN }]
  [Exp ::= (*) STRING , {RBRACK }]
  [Exp ::= (*) ArrayExp , {RBRACK }]
  [SeqExp ::= (*) LPAREN Exp SEMICOLON ExpList RPAREN , {RBRACK }]
  [Var ::= (*) ID , {RBRACK DOT ASSIGN }]
  [SubscriptVar ::= (*) FieldVar LBRACK Exp RBRACK , {LBRACK RBRACK DOT ASSIGN }]
  [Exp ::= (*) error , {RBRACK }]
  [Exp ::= (*) BREAK , {RBRACK }]
  [Exp ::= (*) ForExp , {RBRACK }]
  [ArrayExp ::= (*) ID LBRACK Exp RBRACK OF Exp , {RBRACK }]
  [LetExp ::= (*) LET DecList IN ExpList END , {RBRACK }]
  [FieldVar ::= (*) Var DOT ID , {LBRACK RBRACK DOT ASSIGN }]
  [Exp ::= (*) INT , {RBRACK }]
  [Exp ::= (*) AssignExp , {RBRACK }]
  [ForExp ::= (*) ID FOR ASSIGN Exp TO Exp DO Exp , {RBRACK }]
  [SubscriptVar ::= SubscriptVar LBRACK (*) Exp RBRACK , {EOF error ID STRING INT SEMICOLON LPAREN RPAREN LBRACK RBRACK DOT ASSIGN WHILE TO DO LET IN END BREAK NIL FUNCTION TYPE }]
  [Var ::= (*) FieldVar , {RBRACK DOT ASSIGN }]
  [SubscriptVar ::= (*) SubscriptVar LBRACK Exp RBRACK , {LBRACK RBRACK DOT ASSIGN }]
  [Exp ::= (*) Var , {RBRACK }]
  [Exp ::= (*) LetExp , {RBRACK }]
  [Exp ::= (*) WhileExp , {RBRACK }]
  [AssignExp ::= (*) Var ASSIGN Exp , {RBRACK }]
  [SubscriptVar ::= (*) ID LBRACK Exp RBRACK , {LBRACK RBRACK DOT ASSIGN }]
}
transition on SeqExp to state [19]
transition on LET to state [18]
transition on error to state [17]
transition on AssignExp to state [16]
transition on Exp to state [106]
transition on BREAK to state [15]
transition on STRING to state [13]
transition on ID to state [12]
transition on NIL to state [11]
transition on LPAREN to state [9]
transition on LetExp to state [10]
transition on WhileExp to state [8]
transition on FieldVar to state [7]
transition on WHILE to state [6]
transition on Var to state [5]
transition on INT to state [4]
transition on SubscriptVar to state [3]
transition on ArrayExp to state [2]
transition on ForExp to state [1]

-------------------
lalr_state [106]: {
  [SubscriptVar ::= SubscriptVar LBRACK Exp (*) RBRACK , {EOF error ID STRING INT SEMICOLON LPAREN RPAREN LBRACK RBRACK DOT ASSIGN WHILE TO DO LET IN END BREAK NIL FUNCTION TYPE }]
}
transition on RBRACK to state [107]

-------------------
lalr_state [107]: {
  [SubscriptVar ::= SubscriptVar LBRACK Exp RBRACK (*) , {EOF error ID STRING INT SEMICOLON LPAREN RPAREN LBRACK RBRACK DOT ASSIGN WHILE TO DO LET IN END BREAK NIL FUNCTION TYPE }]
}

-------------------
------- CUP v0.10g Parser Generation Summary -------
  1 error and 55 warnings
  45 terminals, 24 non terminals, and 53 productions declared, 
  producing 108 unique parse states.
  16 terminals declared but not used.
  0 non terminals declared but not used.
  0 productions never reduced.
  35 conflicts detected (3 expected).
  No code produced.
---------------------------------------------------- (v0.10g)
